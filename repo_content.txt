/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./src/**/*.{js,jsx,ts,tsx}'], // Escanea todos los archivos en src
  theme: {
    extend: {
      colors: {
        primary: '#1e40af', // Azul
        secondary: '#9333ea', // Morado
      },
    },
  },
  plugins: [],
};# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
// src/utils/utils.js
export const formatDate = (dateString) => {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
  };@tailwind base;
@tailwind components;
@tailwind utilities;

@keyframes slide-in {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  .animate-slide-in {
    animation: slide-in 0.3s ease-out;
  }import React, { useState } from 'react';

const TimeTracking = ({ employeeId }) => {
  const [entryId, setEntryId] = useState(null);

  const handleClockIn = async () => {
    const response = await fetch('http://localhost:3001/time/clock-in', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${localStorage.getItem('token')}` },
      body: JSON.stringify({ employee_id: employeeId }),
    });
    const data = await response.json();
    setEntryId(data.id);
  };

  const handleClockOut = async () => {
    await fetch(`http://localhost:3001/time/clock-out/${entryId}`, {
      method: 'PUT',
      headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },
    });
    setEntryId(null);
  };

  return (
    <div className="p-6 bg-white rounded-lg shadow">
      <h2 className="text-xl font-bold text-primary mb-4">Registro de Horas</h2>
      {!entryId ? (
        <button
          onClick={handleClockIn}
          className="bg-primary text-white p-3 rounded-lg hover:bg-secondary transition-colors"
        >
          Marcar Entrada
        </button>
      ) : (
        <button
          onClick={handleClockOut}
          className="bg-primary text-white p-3 rounded-lg hover:bg-secondary transition-colors"
        >
          Marcar Salida
        </button>
      )}
    </div>
  );
};

export default TimeTracking;import React, { useState, useEffect } from 'react';
import { formatDate } from '../utils/utils';

const HistoryModal = ({ employees, currentEmployeeId, showHistoryModal, setShowHistoryModal }) => {
  const [history, setHistory] = useState([]);
  const [historyFilter, setHistoryFilter] = useState('');

  const fetchEmployeeHistory = async (employeeId) => {
    try {
      const response = await fetch(`http://localhost:3001/employees/${employeeId}/history`, {
        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },
      });
      const data = await response.json();
      setHistory(data);
      setHistoryFilter('');
    } catch (error) {
      console.error('Error fetching history:', error);
    }
  };

  useEffect(() => {
    if (showHistoryModal && currentEmployeeId) {
      fetchEmployeeHistory(currentEmployeeId);
    }
  }, [showHistoryModal, currentEmployeeId]);

  const filteredHistory = history.filter(entry => {
    let oldValue = entry.old_value;
    let newValue = entry.new_value;

    if (entry.field_changed === 'hire_date') {
      oldValue = formatDate(entry.old_value);
      newValue = formatDate(entry.new_value);
    }

    const isRealChange = oldValue !== newValue;
    if (!isRealChange) {
      //console.log('Entrada filtrada por no cambio:', entry);
    }

    return (!historyFilter || entry.field_changed === historyFilter) && isRealChange;
  });

  const exportHistoryToCSV = () => {
    const headers = 'Campo,Valor Anterior,Nuevo Valor,Fecha\n';
    const rows = filteredHistory.map(entry =>
      `${entry.field_changed},${entry.old_value},${entry.new_value},${formatDate(entry.change_date)}`
    ).join('\n');
    const csv = headers + rows;
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const employeeName = `${employees.find(e => e.id === history[0]?.employee_id)?.first_name || ''}_${employees.find(e => e.id === history[0]?.employee_id)?.last_name || ''}`;
    const link = document.createElement('a');
    link.href = url;
    link.download = `history_${employeeName}.csv`;
    link.click();
  };

  return (
    showHistoryModal && (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl max-h-[80vh] overflow-y-auto">
          <h2 className="text-2xl font-bold text-primary mb-4">
            Historial de Cambios - {employees.find(e => e.id === currentEmployeeId)?.first_name || ''} {employees.find(e => e.id === currentEmployeeId)?.last_name || ''}
          </h2>
          <div className="mb-4">
            <select
              onChange={(e) => setHistoryFilter(e.target.value)}
              value={historyFilter}
              className="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary w-full"
            >
              <option value="">Todos los cambios</option>
              <option value="hire_date">Fecha de Contrataci√≥n</option>
              <option value="department_id">Departamento</option>
              <option value="role_id">Cargo</option>
            </select>
          </div>
          {filteredHistory.length > 0 ? (
            <div className="space-y-4">
              {filteredHistory.map((entry, index) => (
                <div
                  key={index}
                  className={`flex items-start gap-4 p-4 rounded-lg shadow-sm ${
                    entry.field_changed === 'hire_date' ? 'bg-blue-50' :
                    entry.field_changed === 'department_id' ? 'bg-green-50' :
                    entry.field_changed === 'role_id' ? 'bg-yellow-50' : 'bg-gray-50'
                  }`}
                >
                  <div className="flex-shrink-0 w-10 h-10 rounded-full bg-white border-2 flex items-center justify-center text-lg">
                    {entry.field_changed === 'hire_date' && 'üìÖ'}
                    {entry.field_changed === 'department_id' && 'üè¢'}
                    {entry.field_changed === 'role_id' && 'üë§'}
                  </div>
                  <div className="flex-1">
                    <span className="block text-sm text-gray-500">{formatDate(entry.change_date)}</span>
                    <p className="font-semibold text-gray-800">{entry.field_changed}</p>
                    <p className="text-gray-700">
                      De: <span className="line-through">{entry.field_changed === 'hire_date' ? formatDate(entry.old_value) : entry.old_value}</span> ‚Üí 
                      A: <span className="font-bold">{entry.field_changed === 'hire_date' ? formatDate(entry.new_value) : entry.new_value}</span>
                    </p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center p-6 text-gray-500 italic">
              <p>Este empleado no tiene cambios registrados.</p>
            </div>
          )}
          <div className="flex gap-4 mt-6">
            <button
              onClick={() => setShowHistoryModal(false)}
              className="bg-gray-500 text-white p-3 rounded-lg hover:bg-gray-600 transition-colors"
            >
              Cerrar
            </button>
            <button
              onClick={exportHistoryToCSV}
              disabled={filteredHistory.length === 0}
              className={`p-3 rounded-lg transition-colors ${
                filteredHistory.length === 0
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-primary text-white hover:bg-secondary'
              }`}
            >
              Exportar a CSV
            </button>
          </div>
        </div>
      </div>
    )
  );
};

export default HistoryModal;// src/components/ProfileSection.js
import React from 'react';
import { formatDate } from '../utils/utils';

const ProfileSection = ({ employee, departments, roles }) => {
  if (!employee) return <p>Cargando perfil...</p>;

  return (
    <div className="profile-section">
      <h2>Perfil del Empleado</h2>
      <div className="profile-details">
        <p><strong>Nombre:</strong> {employee.first_name} {employee.last_name}</p>
        <p><strong>Email:</strong> {employee.email}</p>
        <p><strong>Departamento:</strong> {employee.department_id ? departments.find(d => d.id === employee.department_id)?.name || 'Sin asignar' : 'Sin asignar'}</p>
        <p><strong>Cargo:</strong> {employee.role_id ? roles.find(r => r.id === employee.role_id)?.title || 'Sin asignar' : 'Sin asignar'}</p>
        <p><strong>Fecha de Contrataci√≥n:</strong> {formatDate(employee.hire_date)}</p>
        <p><strong>Salario:</strong> ${employee.role_id ? roles.find(r => r.id === employee.role_id)?.salary?.toLocaleString() || 'N/A' : 'N/A'}</p>
      </div>
    </div>
  );
};

export default ProfileSection;import React, { useState, useRef, useEffect } from 'react';
import { Menu } from '@headlessui/react';
import ReactDOM from 'react-dom';
import { formatDate } from '../utils/utils';

const RoleTable = ({
  roleForm,
  setRoleForm,
  editRoleId,
  setEditRoleId,
  showInactive,
  setShowInactive,
  showAdvancedFilters,
  setShowAdvancedFilters,
  filters,
  setFilters,
  searchTerm,
  setSearchTerm,
  searchCriteria,
  setSearchCriteria,
  filteredRoles,
  handleRoleSubmit,
  handleEdit,
  handleDelete,
  fetchRoleHistory,
  handleRestore,
  resetFilters,
  fetchRoleProfile,
}) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isActionModalOpen, setIsActionModalOpen] = useState(false);
  const [selectedRole, setSelectedRole] = useState(null);
  const [actionType, setActionType] = useState('');
  const [menuPosition, setMenuPosition] = useState({ x: 0, y: 0, direction: 'bottom' });
  const [currentMenuIndex, setCurrentMenuIndex] = useState(null);

  const menuButtons = useRef([]);
  const menuRef = useRef(null);

  const openModal = () => setIsModalOpen(true);
  const closeModal = () => {
    setIsModalOpen(false);
    setEditRoleId(null);
    setRoleForm({ title: '', salary: '' }); // Solo 'title' y 'salary' basado en la estructura de la tabla
  };

  const openActionModal = (role, type) => {
    setSelectedRole(role);
    setActionType(type);
    setIsActionModalOpen(true);
  };

  const closeActionModal = () => {
    setIsActionModalOpen(false);
    setSelectedRole(null);
    setActionType('');
  };

  const confirmAction = () => {
    if (actionType === 'delete') {
      handleDelete('roles', selectedRole.id);
    } else if (actionType === 'restore') {
      handleRestore(selectedRole.id);
    } else if (actionType === 'history') {
      fetchRoleHistory(selectedRole.id);
    } else if (actionType === 'edit') {
      handleEdit('roles', selectedRole);
      setIsActionModalOpen(false);
      setIsModalOpen(true);
    } else if (actionType === 'profile') {
      fetchRoleProfile(selectedRole.id);
    }
    closeActionModal();
  };

  const handleMenuOpen = (index) => {
    const button = menuButtons.current[index];
    if (button) {
      const rect = button.getBoundingClientRect();
      const menuHeight = 200; // Aproximaci√≥n de la altura del men√∫ (8 √≠tems * 25px)
      const viewportHeight = window.innerHeight;
      const spaceBelow = viewportHeight - rect.bottom;

      // Forzar apertura hacia abajo por defecto en la parte superior, hacia arriba justo por encima en la parte inferior
      let direction = 'bottom';
      let y = rect.bottom + 8; // Posici√≥n justo debajo del bot√≥n

      // Si estamos en la mitad inferior o cerca del borde inferior, abrir hacia arriba justo por encima
      if (rect.top > viewportHeight / 2 || spaceBelow < menuHeight) {
        direction = 'top';
        y = rect.top - 8; // Posici√≥n justo por encima del bot√≥n
      }

      const x = rect.right - 192; // 192px es el ancho del men√∫ (w-48)

      setMenuPosition({ x, y, direction });
      setCurrentMenuIndex(index);
    }
  };

  const handleMenuClose = () => {
    setCurrentMenuIndex(null);
  };

  // Cierre del men√∫ al hacer clic fuera
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (menuRef.current && !menuRef.current.contains(event.target) && currentMenuIndex !== null) {
        handleMenuClose();
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [currentMenuIndex]);

  return (
    <div className="max-w-7xl mx-auto py-6">
      {/* Bot√≥n Flotante para A√±adir Cargo */}
      <button
        onClick={openModal}
        className="fixed bottom-6 right-6 bg-primary text-white p-4 rounded-full shadow-lg hover:bg-secondary transition-colors z-50"
      >
        + A√±adir Cargo
      </button>

      {/* Modal para A√±adir/Editar Cargo */}
      {isModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-lg">
            <h2 className="text-2xl font-bold text-primary mb-6">{editRoleId ? 'Editar Cargo' : 'A√±adir Cargo'}</h2>
            <form onSubmit={handleRoleSubmit}>
              <div className="grid grid-cols-1 gap-4">
                <input
                  name="title"
                  value={roleForm.title}
                  onChange={(e) => setRoleForm({ ...roleForm, title: e.target.value })}
                  placeholder="T√≠tulo"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                  required
                />
                <input
                  name="salary"
                  type="number"
                  step="0.01"
                  value={roleForm.salary}
                  onChange={(e) => setRoleForm({ ...roleForm, salary: e.target.value })}
                  placeholder="Salario"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                  required
                />
              </div>
              <div className="flex gap-4 mt-6">
                <button
                  type="submit"
                  className="bg-primary text-white p-3 rounded-lg hover:bg-secondary transition-colors"
                >
                  {editRoleId ? 'Actualizar' : 'Agregar'} Cargo
                </button>
                <button
                  type="button"
                  onClick={closeModal}
                  className="bg-gray-500 text-white p-3 rounded-lg hover:bg-gray-600 transition-colors"
                >
                  Cancelar
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Modal para Confirmar Acciones */}
      {isActionModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h2 className="text-xl font-bold text-primary mb-4">
              {actionType === 'delete' ? 'Confirmar Eliminaci√≥n' : 
               actionType === 'restore' ? 'Confirmar Restauraci√≥n' : 
               actionType === 'history' ? 'Ver Historial' : 'Confirmar Acci√≥n'}
            </h2>
            <p className="text-gray-700 mb-6">
              {actionType === 'delete' ? `¬øEst√°s seguro de que deseas eliminar el cargo ${selectedRole.title}?` :
               actionType === 'restore' ? `¬øEst√°s seguro de que deseas restaurar el cargo ${selectedRole.title}?` :
               actionType === 'history' ? `Abriendo historial del cargo ${selectedRole.title}` :
               actionType === 'edit' ? `Editando el cargo ${selectedRole.title}` : 
               actionType === 'profile' ? `Ver perfil del cargo ${selectedRole.title}` : ''}
            </p>
            <div className="flex gap-4">
              <button
                onClick={confirmAction}
                className={`${actionType === 'delete' ? 'bg-red-500 hover:bg-red-600' : 'bg-primary hover:bg-secondary'} text-white p-3 rounded-lg transition-colors`}
              >
                {actionType === 'delete' ? 'Eliminar' : 
                 actionType === 'restore' ? 'Restaurar' : 
                 actionType === 'history' ? 'Abrir' : 
                 actionType === 'edit' ? 'Editar' : 
                 actionType === 'profile' ? 'Ver' : 'Confirmar'}
              </button>
              <button
                onClick={closeActionModal}
                className="bg-gray-500 text-white p-3 rounded-lg hover:bg-gray-600 transition-colors"
              >
                Cancelar
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Controles de Cargos */}
      <div className="flex justify-between items-center mb-6">
        <div className="flex gap-4">
          <button
            className={`px-4 py-2 rounded-lg border ${!showInactive ? 'bg-primary text-white border-primary' : 'bg-gray-100 border-gray-300'} hover:bg-opacity-80 transition-colors`}
            onClick={() => { setShowInactive(false); resetFilters(); }}
          >
            üé© Activos
          </button>
          <button
            className={`px-4 py-2 rounded-lg border ${showInactive ? 'bg-primary text-white border-primary' : 'bg-gray-100 border-gray-300'} hover:bg-opacity-80 transition-colors`}
            onClick={() => { setShowInactive(true); resetFilters(); }}
          >
            üóëÔ∏è Inactivos
          </button>
        </div>
        <button
          className="bg-primary text-white px-4 py-2 rounded-lg hover:bg-secondary transition-colors"
          onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
        >
          {showAdvancedFilters ? 'Ocultar Filtros' : 'B√∫squeda Avanzada'} üîç
        </button>
      </div>

      {/* Filtros Avanzados */}
      {showAdvancedFilters && (
        <div className="bg-gray-50 p-4 rounded-lg mb-6 flex flex-wrap gap-4">
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="Buscar por t√≠tulo"
            className="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
          />
          <input
            type="number"
            value={filters.salary_min || ''}
            onChange={(e) => setFilters({ ...filters, salary_min: e.target.value })}
            className="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Salario m√≠nimo"
          />
          <input
            type="number"
            value={filters.salary_max || ''}
            onChange={(e) => setFilters({ ...filters, salary_max: e.target.value })}
            className="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Salario m√°ximo"
          />
          <button
            onClick={resetFilters}
            className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors"
          >
            Restablecer Filtros
          </button>
        </div>
      )}

      {/* Barra de B√∫squeda */}
      <div className="flex gap-4 mb-6">
        <input
          type="text"
          placeholder="Buscar por t√≠tulo"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full max-w-xs p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
        />
      </div>

      {/* Tabla de Cargos */}
      <div className="max-h-[500px] overflow-y-auto">
        <table className="w-full max-w-full bg-white rounded-lg shadow-lg">
          <thead>
            <tr className="bg-primary text-white sticky top-0 z-10">
              <th className="p-3 text-left">ID</th>
              <th className="p-3 text-left">T√≠tulo</th>
              <th className="p-3 text-left">Salario</th>
              <th className="p-3 text-left">Acciones</th>
            </tr>
          </thead>
          <tbody>
            {filteredRoles.map((role, index) => (
              <tr
                key={role.id}
                className="border-b hover:bg-gray-50 transition-colors"
              >
                <td className="p-3">{role.id}</td>
                <td className="p-3">{role.title}</td>
                <td className="p-3">{role.salary}</td>
                <td className="p-3">
                  <Menu as="div" className="relative inline-block text-left">
                    <Menu.Button
                      ref={el => (menuButtons.current[index] = el)}
                      onClick={() => handleMenuOpen(index)}
                      className="bg-gray-200 text-gray-700 px-3 py-1 rounded-lg hover:bg-gray-300 transition-colors"
                    >
                      ...
                    </Menu.Button>
                    {currentMenuIndex === index && ReactDOM.createPortal(
                      <Menu.Items
                        static
                        ref={menuRef}
                        className="fixed bg-white rounded-lg shadow-lg z-50 w-48"
                        style={{
                          top: menuPosition.y,
                          left: menuPosition.x,
                          transform: menuPosition.direction === 'top' ? 'translateY(-100%)' : 'none',
                        }}
                      >
                        <div className="py-1">
                          <Menu.Item>
                            {({ active, close }) => (
                              <button
                                onClick={() => {
                                  openActionModal(role, 'edit');
                                  close();
                                }}
                                className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-blue-500 text-white' : 'text-gray-700'} hover:bg-blue-500 hover:text-white`}
                              >
                                Editar
                              </button>
                            )}
                          </Menu.Item>
                          <Menu.Item>
                            {({ active, close }) => (
                              <button
                                onClick={() => {
                                  openActionModal(role, 'delete');
                                  close();
                                }}
                                className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-red-500 text-white' : 'text-gray-700'} hover:bg-red-500 hover:text-white`}
                              >
                                Eliminar
                              </button>
                            )}
                          </Menu.Item>
                          <Menu.Item>
                            {({ active, close }) => (
                              <button
                                onClick={() => {
                                  openActionModal(role, 'history');
                                  close();
                                }}
                                className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-green-500 text-white' : 'text-gray-700'} hover:bg-green-500 hover:text-white`}
                              >
                                Historial
                              </button>
                            )}
                          </Menu.Item>
                          {showInactive && (
                            <Menu.Item>
                              {({ active, close }) => (
                                <button
                                  onClick={() => {
                                    openActionModal(role, 'restore');
                                    close();
                                  }}
                                  className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-green-500 text-white' : 'text-gray-700'} hover:bg-green-500 hover:text-white`}
                                >
                                  Restaurar
                                </button>
                              )}
                            </Menu.Item>
                          )}
                          <Menu.Item>
                            {({ active, close }) => (
                              <button
                                onClick={() => {
                                  openActionModal(role, 'profile');
                                  close();
                                }}
                                className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-primary text-white' : 'text-gray-700'} hover:bg-primary hover:text-white`}
                              >
                                Perfil
                              </button>
                            )}
                          </Menu.Item>
                        </div>
                      </Menu.Items>,
                      document.body
                    )}
                  </Menu>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default RoleTable;import React from 'react';

const RecognitionPanel = ({ employees, setNotification, fetchRecognitions, currentPage, setCurrentPage, recognitions, totalPages, userRole, error }) => {
  const [formData, setFormData] = React.useState({ employee_id: '', message: '', badge: '', date: '' });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('http://localhost:3001/recognitions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify(formData),
      });
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'Error al a√±adir reconocimiento');
      }
      setNotification({ message: 'Reconocimiento a√±adido con √©xito', type: 'success' });
      fetchRecognitions(currentPage);
      setFormData({ employee_id: '', message: '', badge: '', date: '' });
    } catch (err) {
      setNotification({ message: err.message, type: 'error' });
    }
  };

  const handlePageChange = (newPage) => {
    if (newPage >= 1 && newPage <= totalPages) {
      setCurrentPage(newPage);
      fetchRecognitions(newPage);
    }
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold text-primary mb-6">Reconocimientos</h2>

      {/* Formulario para administradores */}
      {userRole === 'admin' && (
        <form onSubmit={handleSubmit} className="mb-8 bg-white p-6 rounded-lg shadow-md">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <select
              value={formData.employee_id}
              onChange={(e) => setFormData({ ...formData, employee_id: e.target.value })}
              className="border border-gray-300 p-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            >
              <option value="">Selecciona un empleado</option>
              {employees.map(emp => (
                <option key={emp.id} value={emp.id}>{emp.first_name} {emp.last_name}</option>
              ))}
            </select>
            <input
              type="text"
              placeholder="Mensaje"
              value={formData.message}
              onChange={(e) => setFormData({ ...formData, message: e.target.value })}
              className="border border-gray-300 p-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            />
            <input
              type="text"
              placeholder="Insignia"
              value={formData.badge}
              onChange={(e) => setFormData({ ...formData, badge: e.target.value })}
              className="border border-gray-300 p-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            />
            <input
              type="date"
              value={formData.date}
              onChange={(e) => setFormData({ ...formData, date: e.target.value })}
              className="border border-gray-300 p-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>
          <button type="submit" className="mt-4 bg-primary text-white p-2 rounded-lg hover:bg-opacity-90">
            A√±adir Reconocimiento
          </button>
        </form>
      )}

      {error && <p className="text-red-500 mb-4">{error}</p>}

      {/* Lista de reconocimientos como tarjetas */}
      <div className="grid gap-6">
        {recognitions.length > 0 ? (
          recognitions.map(rec => {
            const employee = employees.find(emp => emp.id === rec.employee_id) || {};
            return (
              <div key={rec.id} className="bg-white p-6 rounded-lg shadow-md flex items-start space-x-4 hover:shadow-lg transition-shadow">
                <div className="flex-shrink-0">
                  <span className="text-3xl">üèÜ</span>
                </div>
                <div className="flex-1">
                  <h3 className="text-lg font-semibold text-primary">
                    {employee.first_name} {employee.last_name}
                  </h3>
                  <p className="text-gray-600 mt-1">{rec.message}</p>
                  <p className="text-sm text-gray-500 mt-2">
                    Insignia: <span className="font-medium">{rec.badge}</span>
                  </p>
                  <p className="text-sm text-gray-500">
                    Fecha: {new Date(rec.date).toLocaleDateString()}
                  </p>
                </div>
              </div>
            );
          })
        ) : (
          <p className="text-gray-500 text-center py-8">No hay reconocimientos registrados.</p>
        )}
      </div>

      {/* Paginaci√≥n */}
      <div className="mt-6 flex justify-between items-center max-w-md mx-auto">
        <button
          onClick={() => handlePageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className="bg-gray-200 text-gray-700 p-2 rounded-lg disabled:opacity-50 hover:bg-gray-300"
        >
          Anterior
        </button>
        <span className="text-gray-600 truncate">P√°gina {currentPage} de {totalPages || 1}</span>
        <button
          onClick={() => handlePageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className="bg-gray-200 text-gray-700 p-2 rounded-lg disabled:opacity-50 hover:bg-gray-300"
        >
          Siguiente
        </button>
      </div>
    </div>
  );
};

export default RecognitionPanel;import React from 'react';

const Navbar = () => {
  return (
    <nav className="bg-primary text-white p-4 shadow-md">
      <div className="container mx-auto flex justify-between items-center">
        <h1 className="text-2xl font-bold">HR App</h1>
        <div>
          <button className="bg-secondary hover:bg-opacity-80 text-white px-4 py-2 rounded">
            Cerrar Sesi√≥n
          </button>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;import React from 'react';

const Sidebar = ({ activeTab, setActiveTab }) => {
  return (
    <nav className="fixed left-0 top-0 w-64 h-full bg-gray-800 text-white p-6 shadow-lg">
      <h1 className="text-2xl font-bold mb-6">INGENIUS</h1>
      <ul className="space-y-4">
        {[
          { tab: 'employees', icon: 'üë§', label: 'Empleados' },
          { tab: 'departments', icon: 'üè¢', label: 'Departamentos' },
          { tab: 'roles', icon: 'üéì', label: 'Cargos' },
          { tab: 'dashboard', icon: 'üìä', label: 'Dashboard' },
          { tab: 'reports', icon: 'üìä', label: 'Reportes' },
          { tab: 'recognitions', icon: 'üèÜ', label: 'Reconocimientos' },
          { tab: 'employee-profile', icon: 'üë§', label: 'Perfil de Empleado' },
        ].map(({ tab, icon, label }) => (
          <li
            key={tab}
            onClick={() => setActiveTab(tab)}
            className={`p-4 cursor-pointer rounded-lg transition-colors ${
              activeTab === tab ? 'bg-primary' : 'hover:bg-gray-700'
            }`}
          >
            {icon} {label}
          </li>
        ))}
      </ul>
    </nav>
  );
};

export default Sidebar;import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const Login = ({ setIsAuthenticated, setUserRole, setUserRoles, setEmployeeId, setEmail, setToken, setForcePasswordChange }) => {
  const [email, setLocalEmail] = useState(''); // Estado local para el email
  const [password, setPassword] = useState(''); // Estado local para la contrase√±a
  const [error, setError] = useState(''); // Mensaje de error para el usuario
  const navigate = useNavigate();

  // Cargar email recordado al montar el componente
  useEffect(() => {
    const rememberedEmail = localStorage.getItem('rememberedEmail');
    const rememberEmail = localStorage.getItem('rememberEmail') === 'true';
    if (rememberEmail && rememberedEmail) setLocalEmail(rememberedEmail);
  }, []);

  // Manejar el env√≠o del formulario de login
  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('http://localhost:3001/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });
      const data = await response.json();

      if (response.ok) {
        // Login exitoso: usuario autenticado y sin necesidad de cambiar contrase√±a
        const decodedToken = JSON.parse(atob(data.token.split('.')[1]));
        localStorage.setItem('token', data.token);
        localStorage.setItem('userRole', decodedToken.roles[0] || 'employee');
        localStorage.setItem('userRoles', JSON.stringify(decodedToken.roles));
        localStorage.setItem('employeeId', decodedToken.id || '');
        setIsAuthenticated(true); // Marcar como autenticado
        setUserRole(decodedToken.roles[0] || 'employee');
        setUserRoles(decodedToken.roles || ['employee']);
        setEmployeeId(decodedToken.id || null);
        setEmail(email);
        setToken(data.token);
        setForcePasswordChange(false);
        navigate(decodedToken.roles.includes('employee') ? '/profile' : '/dashboard');
      } else if (data.message === 'Debes cambiar tu contrase√±a') {
        // Caso 403: usuario debe cambiar su contrase√±a
        setForcePasswordChange(true); // Activar el estado para forzar cambio
        setEmployeeId(data.userId || null); // Guardar el ID del usuario
        setEmail(email); // Guardar el email para usarlo en ChangePassword
        navigate('/change-password'); // Redirigir a la pantalla de cambio de contrase√±a
      } else {
        // Otros errores (ej. 401): credenciales inv√°lidas
        setError(data.message || 'Credenciales inv√°lidas');
      }
    } catch (err) {
      // Error de red u otros problemas inesperados
      setError('Error de red');
    }
  };

  // Manejar el checkbox de "Recordar Email"
  const handleRememberEmailChange = (e) => {
    const checked = e.target.checked;
    localStorage.setItem('rememberEmail', checked);
    if (checked) localStorage.setItem('rememberedEmail', email);
    else localStorage.removeItem('rememberedEmail');
  };

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-sm">
        <h2 className="text-2xl font-bold text-primary mb-6">Iniciar Sesi√≥n</h2>
        <form onSubmit={handleLogin} className="flex flex-col gap-4">
          <input
            type="email"
            value={email}
            onChange={(e) => setLocalEmail(e.target.value)}
            placeholder="Email"
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            required
          />
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Contrase√±a"
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            required
          />
          <button
            type="submit"
            className="w-full bg-primary text-white p-3 rounded-lg hover:bg-secondary transition-colors"
          >
            Iniciar Sesi√≥n
          </button>
        </form>
        {error && <p className="text-red-500 mt-4 text-center">{error}</p>}
        <label className="flex items-center gap-2 mt-4">
          <input
            type="checkbox"
            onChange={handleRememberEmailChange}
            defaultChecked={localStorage.getItem('rememberEmail') === 'true'}
            className="h-4 w-4 text-primary"
          />
          <span className="text-gray-700">Recordar Email</span>
        </label>
        <button
          type="button"
          className="text-primary mt-2 underline hover:text-secondary"
          onClick={() => alert('Funcionalidad no implementada a√∫n')}
        >
          ¬øOlvidaste tu contrase√±a?
        </button>
      </div>
    </div>
  );
};

export default Login;import React, { useState, useEffect } from 'react';
import { useEmployeeProfile } from '../hooks/useEmployeeProfile';

const EmployeeProfile = ({ employeeId, setNotification, departments, roles, userRole, isAuthenticated }) => {
  const { employee, history, loading, error } = useEmployeeProfile(employeeId, setNotification, isAuthenticated, userRole);
  const [timeEntries, setTimeEntries] = useState([]); // Estado para almacenar fichajes anteriores
  const [latestEntryId, setLatestEntryId] = useState(null); // ID de la entrada m√°s reciente sin salida

  // Obtener fichajes anteriores
  const fetchTimeEntries = async () => {
    try {
      const response = await fetch(`http://localhost:3001/time/entries/${employeeId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });
      if (!response.ok) throw new Error('Error al cargar fichajes');
      const data = await response.json();
      setTimeEntries(data);
      // Encontrar la entrada m√°s reciente sin salida
      const latest = data.find(entry => !entry.clock_out);
      setLatestEntryId(latest ? latest.id : null);
    } catch (err) {
      setNotification({ message: `Error al cargar fichajes: ${err.message}`, type: 'error' });
      setTimeEntries([]); // En caso de error, establecer una lista vac√≠a
    }
  };

  // Cargar fichajes al montar el componente
  useEffect(() => {
    if (employeeId) {
      fetchTimeEntries();
    }
  }, [employeeId, fetchTimeEntries]); // A√±adido fetchTimeEntries al array de dependencias

  const handleClockIn = async () => {
    try {
      const response = await fetch('http://localhost:3001/time/clock-in', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify({ employee_id: employeeId }),
      });
      if (!response.ok) throw new Error('Error al marcar entrada');
      setNotification({ message: 'Entrada marcada con √©xito', type: 'success' });
      fetchTimeEntries(); // Actualizar fichajes despu√©s de marcar entrada
    } catch (err) {
      setNotification({ message: err.message, type: 'error' });
    }
  };

  const handleClockOut = async () => {
    if (!latestEntryId) {
      setNotification({ message: 'No hay una entrada reciente para marcar salida', type: 'error' });
      return;
    }
    try {
      const response = await fetch(`http://localhost:3001/time/clock-out/${latestEntryId}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });
      if (!response.ok) throw new Error('Error al marcar salida');
      setNotification({ message: 'Salida marcada con √©xito', type: 'success' });
      fetchTimeEntries(); // Actualizar fichajes despu√©s de marcar salida
    } catch (err) {
      setNotification({ message: err.message, type: 'error' });
    }
  };

  if (loading) return <p className="text-center text-gray-500">Cargando perfil...</p>;
  if (error) return <p className="text-center text-red-500">{error}</p>;
  if (!employee) return <p className="text-center text-gray-500">No se encontraron datos del empleado.</p>;

  const department = departments?.find(dept => dept.id === employee.department_id) || {};
  const role = roles?.find(r => r.id === employee.role_id) || {};

  const salaryFormatted = employee.salary != null && !isNaN(employee.salary)
    ? `$${parseFloat(employee.salary).toFixed(2)}`
    : '$N/A';

  // Calcular tiempo transcurrido entre entrada y salida
  const calculateTimeDifference = (clockIn, clockOut) => {
    if (!clockIn || !clockOut) return '-';
    const start = new Date(clockIn);
    const end = new Date(clockOut);
    const diffMs = end - start;
    const hours = Math.floor(diffMs / (1000 * 60 * 60));
    const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    return `${hours}h ${minutes}m`;
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold text-primary mb-6">Perfil del Empleado</h2>

      {/* Encabezado con foto y datos b√°sicos */}
      <div className="bg-white p-6 rounded-lg shadow-md mb-6 flex items-start space-x-6">
        <div className="flex-shrink-0">
          <div className="w-24 h-24 rounded-full bg-gray-200 flex items-center justify-center">
            {/* Placeholder para la foto */}
            <span className="text-gray-500 text-2xl">üì∑</span>
          </div>
        </div>
        <div className="flex-1">
          <h3 className="text-xl font-semibold text-primary">
            {employee.first_name} {employee.last_name}
          </h3>
          <p className="text-gray-600 mt-1"><strong>Email:</strong> {employee.email}</p>
          <p className="text-gray-600"><strong>Departamento:</strong> {department.name || 'Sin asignar'}</p>
          <p className="text-gray-600"><strong>Cargo:</strong> {role.title || 'Sin asignar'}</p>
          <p className="text-gray-600"><strong>Fecha de Contrataci√≥n:</strong> {new Date(employee.hire_date).toLocaleDateString()}</p>
          <p className="text-gray-600"><strong>Salario:</strong> {salaryFormatted}</p>
        </div>
      </div>

      {/* Secci√≥n de Fichaje */}
      <div className="bg-white p-6 rounded-lg shadow-md mb-6">
        <h3 className="text-lg font-semibold text-primary mb-4">Fichaje</h3>
        <div className="flex space-x-4 mb-4">
          <button
            onClick={handleClockIn}
            className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
          >
            Marcar Entrada
          </button>
          <button
            onClick={handleClockOut}
            disabled={!latestEntryId}
            className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 disabled:opacity-50"
          >
            Marcar Salida
          </button>
        </div>

        {/* Tabla de Fichajes Anteriores */}
        <div className="overflow-x-auto">
          <table className="min-w-full border-collapse">
            <thead>
              <tr className="bg-gray-200">
                <th className="border p-2 text-left">Entrada</th>
                <th className="border p-2 text-left">Salida</th>
                <th className="border p-2 text-left">Tiempo Transcurrido</th>
              </tr>
            </thead>
            <tbody>
              {timeEntries.length > 0 ? (
                timeEntries.map(entry => (
                  <tr key={entry.id} className="hover:bg-gray-100">
                    <td className="border p-2">{new Date(entry.clock_in).toLocaleString()}</td>
                    <td className="border p-2">{entry.clock_out ? new Date(entry.clock_out).toLocaleString() : '-'}</td>
                    <td className="border p-2">{calculateTimeDifference(entry.clock_in, entry.clock_out)}</td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="3" className="border p-2 text-center text-gray-500">No hay fichajes registrados.</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Historial */}
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h3 className="text-lg font-semibold text-primary mb-4">Historial de Cambios</h3>
        {history.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="min-w-full border-collapse">
              <thead>
                <tr className="bg-gray-200">
                  <th className="border p-2 text-left">Campo</th>
                  <th className="border p-2 text-left">Valor Anterior</th>
                  <th className="border p-2 text-left">Valor Nuevo</th>
                  <th className="border p-2 text-left">Fecha</th>
                </tr>
              </thead>
              <tbody>
                {history.map(entry => (
                  <tr key={entry.id} className="hover:bg-gray-100">
                    <td className="border p-2">{entry.field_changed}</td>
                    <td className="border p-2">{entry.old_value || 'N/A'}</td>
                    <td className="border p-2">{entry.new_value || 'N/A'}</td>
                    <td className="border p-2">{new Date(entry.change_date).toLocaleString()}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <p className="text-gray-500 text-center">No hay cambios registrados.</p>
        )}
      </div>
    </div>
  );
};

export default EmployeeProfile;// src/components/VacationSection.js
import React from 'react';
import { formatDate } from '../utils/utils';

const VacationSection = ({ vacations }) => {
  if (!vacations || vacations.length === 0) return <p>No hay solicitudes de vacaciones.</p>;

  return (
    <div className="vacation-section">
      <h2>Solicitudes de Vacaciones</h2>
      <table className="vacation-table">
        <thead>
          <tr>
            <th>Fecha Inicio</th>
            <th>Fecha Fin</th>
            <th>Estado</th>
          </tr>
        </thead>
        <tbody>
          {vacations.map((vacation, index) => (
            <tr key={index}>
              <td>{formatDate(vacation.start_date)}</td>
              <td>{formatDate(vacation.end_date)}</td>
              <td>{vacation.status || 'Pendiente'}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default VacationSection;import React from 'react';
import { Bar } from 'react-chartjs-2';

const Dashboard = ({ dashboardData, chartData }) => {
  // Configuraci√≥n del gr√°fico
  const chartOptions = {
    responsive: true,
    plugins: {
      legend: { position: 'top' },
      title: { display: true, text: 'Distribuci√≥n de Empleados por Departamento' },
    },
  };

  // Transformar chartData al formato requerido por Chart.js
  const chartConfig = {
    labels: Array.isArray(chartData) && chartData.length > 0 ? chartData.map(item => item.name) : [],
    datasets: [
      {
        label: 'Cantidad de Empleados',
        data: Array.isArray(chartData) && chartData.length > 0 ? chartData.map(item => item.employee_count) : [],
        backgroundColor: '#1E40AF', // Color text-primary (azul oscuro, similar a blue-900 en Tailwind)
        borderColor: '#1E40AF', // Borde igual al fondo para uniformidad
        borderWidth: 1,
      },
    ],
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold text-primary mb-6">Dashboard</h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white p-6 rounded-lg shadow text-center">
          <h3 className="text-lg font-semibold text-gray-800 mb-2">üë§ Empleados Activos</h3>
          <p className="text-2xl font-bold text-primary">{dashboardData.activeEmployees || 0}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow text-center">
          <h3 className="text-lg font-semibold text-gray-800 mb-2">üóëÔ∏è Empleados Inactivos</h3>
          <p className="text-2xl font-bold text-primary">{dashboardData.inactiveEmployees || 0}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow text-center">
          <h3 className="text-lg font-semibold text-gray-800 mb-2">üí∞ Salario Total</h3>
          <p className="text-2xl font-bold text-primary">${(dashboardData.totalSalary || 0).toLocaleString()}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow text-center">
          <h3 className="text-lg font-semibold text-gray-800 mb-2">üè¢ Departamentos</h3>
          <p className="text-2xl font-bold text-primary">{dashboardData.departmentCount || 0}</p>
        </div>
      </div>
      <div className="mt-6 max-w-2xl mx-auto">
        {Array.isArray(chartData) && chartData.length > 0 ? (
          <Bar data={chartConfig} options={chartOptions} />
        ) : (
          <p className="text-gray-500 text-center">No hay datos disponibles para la gr√°fica.</p>
        )}
      </div>
    </div>
  );
};

export default Dashboard;// src/components/HistorySection.js
import React from 'react';
import { formatDate } from '../utils/utils';

const HistorySection = ({ history }) => {
  if (!history || history.length === 0) return <p>No hay historial disponible.</p>;

  return (
    <div className="history-section">
      <h2>Historial de Cambios</h2>
      <div className="timeline">
        {history.map((entry, index) => (
          <div key={index} className="timeline-item">
            <div className="timeline-date">{formatDate(entry.change_date)}</div>
            <p><strong>{entry.field_changed}</strong>: De {entry.old_value} a {entry.new_value}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default HistorySection;import React, { useState } from 'react';
import fetchWithToken from '../api/client';

const ChangePassword = ({ user, setUser, setNotification }) => {
  const [oldPassword, setOldPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [error, setError] = useState('');

  const handleChangePassword = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('http://localhost:3001/change-password', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: user.email, oldPassword, newPassword }),
      });
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Error al cambiar la contrase√±a');
      }

      // Guardar el token en localStorage para que los hooks lo usen
      localStorage.setItem('token', data.token);
      // Actualizar el estado del usuario con el nuevo token y force_password_change = false
      setUser({ token: data.token, force_password_change: false });
      setNotification({ message: 'Contrase√±a cambiada con √©xito', type: 'success' });
      setOldPassword('');
      setNewPassword('');
    } catch (err) {
      setError(err.message);
      setNotification({ message: err.message, type: 'error' });
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-sm">
        <h2 className="text-2xl font-bold text-primary mb-6">Cambiar Contrase√±a</h2>
        <form onSubmit={handleChangePassword} className="flex flex-col gap-4">
          <input
            type="password"
            value={oldPassword}
            onChange={(e) => setOldPassword(e.target.value)}
            placeholder="Contrase√±a Actual"
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            required
          />
          <input
            type="password"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            placeholder="Nueva Contrase√±a"
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            required
          />
          <button
            type="submit"
            className="w-full bg-primary text-white p-3 rounded-lg hover:bg-secondary transition-colors"
          >
            Cambiar Contrase√±a
          </button>
        </form>
        {error && <p className="text-red-500 mt-4 text-center">{error}</p>}
      </div>
    </div>
  );
};

export default ChangePassword;import React, { useState } from 'react';

const Reports = ({ salaryReport, exportToCSV }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const [filters, setFilters] = useState({ date_start: '', date_end: '' });

  // Filtrar reportes por t√©rmino de b√∫squeda (departamento)
  const filteredSalaryReport = salaryReport.filter(report =>
    report.department_name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="max-w-7xl mx-auto py-6">
      <h2 className="text-2xl font-bold text-primary mb-6">Reporte de Salarios por Departamento</h2>
      <div className="flex justify-between items-center mb-6">
        <div className="flex gap-4">
          <button
            className="bg-primary text-white px-4 py-2 rounded-lg hover:bg-secondary transition-colors"
            onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
          >
            {showAdvancedFilters ? 'Ocultar Filtros' : 'B√∫squeda Avanzada'} üîç
          </button>
        </div>
        <button
          onClick={exportToCSV}
          className="bg-primary text-white px-4 py-2 rounded-lg hover:bg-secondary transition-colors"
        >
          Exportar a CSV
        </button>
      </div>

      {/* Filtros Avanzados */}
      {showAdvancedFilters && (
        <div className="bg-gray-50 p-4 rounded-lg mb-6 flex flex-wrap gap-4">
          <input
            type="date"
            value={filters.date_start}
            onChange={(e) => setFilters({ ...filters, date_start: e.target.value })}
            className="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Fecha inicio"
          />
          <input
            type="date"
            value={filters.date_end}
            onChange={(e) => setFilters({ ...filters, date_end: e.target.value })}
            className="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Fecha fin"
          />
        </div>
      )}

      {/* Barra de B√∫squeda */}
      <div className="flex gap-4 mb-6">
        <input
          type="text"
          placeholder="Buscar por departamento"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full max-w-xs p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
        />
      </div>

      {/* Tabla de Reportes */}
      <div className="max-h-[500px] overflow-y-auto">
        <table className="w-full max-w-full bg-white rounded-lg shadow-lg">
          <thead>
            <tr className="bg-primary text-white sticky top-0 z-10">
              <th className="p-3 text-left">Departamento</th>
              <th className="p-3 text-left">Empleados</th>
              <th className="p-3 text-left">Salario Total</th>
              <th className="p-3 text-left">Salario Promedio</th>
            </tr>
          </thead>
          <tbody>
            {filteredSalaryReport.map((row, index) => (
              <tr key={index} className="border-b hover:bg-gray-50 transition-colors">
                <td className="p-3">{row.department_name}</td>
                <td className="p-3">{parseInt(row.employee_count, 10)}</td>
                <td className="p-3">{row.total_salary ? parseFloat(row.total_salary).toFixed(2) : '0.00'}</td>
                <td className="p-3">{row.avg_salary ? parseFloat(row.avg_salary).toFixed(2) : '0.00'}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Reports;import React, { useState, useRef, useEffect } from 'react';
import { Menu } from '@headlessui/react';
import ReactDOM from 'react-dom';
import { formatDate } from '../utils/utils';

const EmployeeTable = ({
  employeeForm,
  setEmployeeForm,
  departments,
  roles,
  editEmployeeId,
  setEditEmployeeId,
  showInactive,
  setShowInactive,
  showAdvancedFilters,
  setShowAdvancedFilters,
  filters,
  setFilters,
  searchTerm,
  setSearchTerm,
  searchCriteria,
  setSearchCriteria,
  filteredEmployees,
  handleEmployeeSubmit,
  handleEdit,
  handleDelete,
  fetchEmployeeHistory,
  handleRestore,
  resetFilters,
  fetchEmployeeProfile,
}) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isActionModalOpen, setIsActionModalOpen] = useState(false);
  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [actionType, setActionType] = useState('');
  const [menuPosition, setMenuPosition] = useState({ x: 0, y: 0, direction: 'bottom' });
  const [currentMenuIndex, setCurrentMenuIndex] = useState(null);

  const menuButtons = useRef([]);
  const menuRef = useRef(null);

  const openModal = () => setIsModalOpen(true);
  const closeModal = () => {
    setIsModalOpen(false);
    setEditEmployeeId(null);
    setEmployeeForm({ first_name: '', last_name: '', email: '', hire_date: '', department_id: '', role_id: '' });
  };

  const openActionModal = (employee, type) => {
    setSelectedEmployee(employee);
    setActionType(type);
    setIsActionModalOpen(true);
  };

  const closeActionModal = () => {
    setIsActionModalOpen(false);
    setSelectedEmployee(null);
    setActionType('');
  };

  const confirmAction = () => {
    if (actionType === 'delete') {
      handleDelete('employees', selectedEmployee.id);
    } else if (actionType === 'restore') {
      handleRestore(selectedEmployee.id);
    } else if (actionType === 'history') {
      fetchEmployeeHistory(selectedEmployee.id);
    } else if (actionType === 'edit') {
      handleEdit('employees', selectedEmployee);
      setIsActionModalOpen(false);
      setIsModalOpen(true);
    }
    closeActionModal();
  };

  const handleMenuOpen = (index) => {
    const button = menuButtons.current[index];
    if (button) {
      const rect = button.getBoundingClientRect();
      const menuHeight = 200; // Aproximaci√≥n de la altura del men√∫ (8 √≠tems * 25px)
      const viewportHeight = window.innerHeight;
      const spaceBelow = viewportHeight - rect.bottom;

      // Forzar apertura hacia abajo por defecto en la parte superior, hacia arriba justo por encima en la parte inferior
      let direction = 'bottom';
      let y = rect.bottom + 8; // Posici√≥n justo debajo del bot√≥n

      // Si estamos en la mitad inferior o cerca del borde inferior, abrir hacia arriba justo por encima
      if (rect.top > viewportHeight / 2 || spaceBelow < menuHeight) {
        direction = 'top';
        y = rect.top - 8; // Posici√≥n justo por encima del bot√≥n
      }

      const x = rect.right - 192; // 192px es el ancho del men√∫ (w-48)

      setMenuPosition({ x, y, direction });
      setCurrentMenuIndex(index);
    }
  };

  const handleMenuClose = () => {
    setCurrentMenuIndex(null);
  };

  // Cierre del men√∫ al hacer clic fuera
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (menuRef.current && !menuRef.current.contains(event.target) && currentMenuIndex !== null) {
        handleMenuClose();
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [currentMenuIndex]);

  return (
    <div className="max-w-7xl mx-auto py-6">
      {/* Bot√≥n Flotante para A√±adir Empleado */}
      <button
        onClick={openModal}
        className="fixed bottom-6 right-6 bg-primary text-white p-4 rounded-full shadow-lg hover:bg-secondary transition-colors z-50"
      >
        + A√±adir Empleado
      </button>

      {/* Modal para A√±adir/Editar Empleado */}
      {isModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-lg">
            <h2 className="text-2xl font-bold text-primary mb-6">{editEmployeeId ? 'Editar Empleado' : 'A√±adir Empleado'}</h2>
            <form onSubmit={handleEmployeeSubmit}>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <input
                  name="first_name"
                  value={employeeForm.first_name}
                  onChange={(e) => setEmployeeForm({ ...employeeForm, first_name: e.target.value })}
                  placeholder="Nombre"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                  required
                />
                <input
                  name="last_name"
                  value={employeeForm.last_name}
                  onChange={(e) => setEmployeeForm({ ...employeeForm, last_name: e.target.value })}
                  placeholder="Apellido"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                  required
                />
                <input
                  name="email"
                  value={employeeForm.email}
                  onChange={(e) => setEmployeeForm({ ...employeeForm, email: e.target.value })}
                  placeholder="Email"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                  required
                />
                <input
                  name="hire_date"
                  type="date"
                  value={employeeForm.hire_date}
                  onChange={(e) => setEmployeeForm({ ...employeeForm, hire_date: e.target.value })}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                  required
                />
                <select
                  name="department_id"
                  value={employeeForm.department_id}
                  onChange={(e) => setEmployeeForm({ ...employeeForm, department_id: e.target.value })}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                  required
                >
                  <option value="">Selecciona Departamento</option>
                  {departments.map(dept => (
                    <option key={dept.id} value={dept.id}>{dept.name}</option>
                  ))}
                </select>
                <select
                  name="role_id"
                  value={employeeForm.role_id}
                  onChange={(e) => setEmployeeForm({ ...employeeForm, role_id: e.target.value })}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                  required
                >
                  <option value="">Selecciona Cargo</option>
                  {roles.map(role => (
                    <option key={role.id} value={role.id}>{role.title}</option>
                  ))}
                </select>
              </div>
              <div className="flex gap-4 mt-6">
                <button
                  type="submit"
                  className="bg-primary text-white p-3 rounded-lg hover:bg-secondary transition-colors"
                >
                  {editEmployeeId ? 'Actualizar' : 'Agregar'} Empleado
                </button>
                <button
                  type="button"
                  onClick={closeModal}
                  className="bg-gray-500 text-white p-3 rounded-lg hover:bg-gray-600 transition-colors"
                >
                  Cancelar
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Modal para Confirmar Acciones */}
      {isActionModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h2 className="text-xl font-bold text-primary mb-4">
              {actionType === 'delete' ? 'Confirmar Eliminaci√≥n' : 
               actionType === 'restore' ? 'Confirmar Restauraci√≥n' : 
               actionType === 'history' ? 'Ver Historial' : 'Confirmar Acci√≥n'}
            </h2>
            <p className="text-gray-700 mb-6">
              {actionType === 'delete' ? `¬øEst√°s seguro de que deseas eliminar a ${selectedEmployee.first_name} ${selectedEmployee.last_name}?` :
               actionType === 'restore' ? `¬øEst√°s seguro de que deseas restaurar a ${selectedEmployee.first_name} ${selectedEmployee.last_name}?` :
               actionType === 'history' ? `Abriendo historial de ${selectedEmployee.first_name} ${selectedEmployee.last_name}` :
               actionType === 'edit' ? `Editando a ${selectedEmployee.first_name} ${selectedEmployee.last_name}` : ''}
            </p>
            <div className="flex gap-4">
              <button
                onClick={confirmAction}
                className={`${actionType === 'delete' ? 'bg-red-500 hover:bg-red-600' : 'bg-primary hover:bg-secondary'} text-white p-3 rounded-lg transition-colors`}
              >
                {actionType === 'delete' ? 'Eliminar' : 
                 actionType === 'restore' ? 'Restaurar' : 
                 actionType === 'history' ? 'Abrir' : 
                 actionType === 'edit' ? 'Editar' : 'Confirmar'}
              </button>
              <button
                onClick={closeActionModal}
                className="bg-gray-500 text-white p-3 rounded-lg hover:bg-gray-600 transition-colors"
              >
                Cancelar
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Controles de Empleados */}
      <div className="flex justify-between items-center mb-6">
        <div className="flex gap-4">
          <button
            className={`px-4 py-2 rounded-lg border ${!showInactive ? 'bg-primary text-white border-primary' : 'bg-gray-100 border-gray-300'} hover:bg-opacity-80 transition-colors`}
            onClick={() => { setShowInactive(false); resetFilters(); }}
          >
            üë§ Activos
          </button>
          <button
            className={`px-4 py-2 rounded-lg border ${showInactive ? 'bg-primary text-white border-primary' : 'bg-gray-100 border-gray-300'} hover:bg-opacity-80 transition-colors`}
            onClick={() => { setShowInactive(true); resetFilters(); }}
          >
            üóëÔ∏è Inactivos
          </button>
        </div>
        <button
          className="bg-primary text-white px-4 py-2 rounded-lg hover:bg-secondary transition-colors"
          onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
        >
          {showAdvancedFilters ? 'Ocultar Filtros' : 'B√∫squeda Avanzada'} üîç
        </button>
      </div>

      {/* Filtros Avanzados */}
      {showAdvancedFilters && (
        <div className="bg-gray-50 p-4 rounded-lg mb-6 flex flex-wrap gap-4">
          <select
            value={filters.department_id}
            onChange={(e) => setFilters({ ...filters, department_id: e.target.value })}
            className="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
          >
            <option value="">Todos los departamentos</option>
            {departments.map(dept => (
              <option key={dept.id} value={dept.id}>{dept.name}</option>
            ))}
          </select>
          <input
            type="date"
            value={filters.hire_date_start}
            onChange={(e) => setFilters({ ...filters, hire_date_start: e.target.value })}
            className="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Fecha inicio"
          />
          <input
            type="date"
            value={filters.hire_date_end}
            onChange={(e) => setFilters({ ...filters, hire_date_end: e.target.value })}
            className="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Fecha fin"
          />
          <input
            type="number"
            value={filters.salary_min}
            onChange={(e) => setFilters({ ...filters, salary_min: e.target.value })}
            className="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Salario m√≠nimo"
          />
          <input
            type="number"
            value={filters.salary_max}
            onChange={(e) => setFilters({ ...filters, salary_max: e.target.value })}
            className="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="Salario m√°ximo"
          />
          <button
            onClick={resetFilters}
            className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors"
          >
            Restablecer Filtros
          </button>
        </div>
      )}

      {/* Barra de B√∫squeda */}
      <div className="flex gap-4 mb-6">
        <select
          value={searchCriteria}
          onChange={(e) => setSearchCriteria(e.target.value)}
          className="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
        >
          <option value="first_name">Nombre</option>
          <option value="last_name">Apellido</option>
          <option value="email">Email</option>
        </select>
        <input
          type="text"
          placeholder={`Buscar por ${searchCriteria === 'first_name' ? 'nombre' : searchCriteria === 'last_name' ? 'apellido' : 'email'}`}
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full max-w-xs p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
        />
      </div>

      {/* Tabla de Empleados */}
      <div className="max-h-[500px] overflow-y-auto">
        <table className="w-full max-w-full bg-white rounded-lg shadow-lg">
          <thead>
            <tr className="bg-primary text-white sticky top-0 z-10">
              <th className="p-3 text-left">ID</th>
              <th className="p-3 text-left">Nombre</th>
              <th className="p-3 text-left">Apellido</th>
              <th className="p-3 text-left">Email</th>
              <th className="p-3 text-left">Fecha Contrataci√≥n</th>
              <th className="p-3 text-left">Departamento</th>
              <th className="p-3 text-left">Cargo</th>
              <th className="p-3 text-left">Acciones</th>
            </tr>
          </thead>
          <tbody>
            {filteredEmployees.map((employee, index) => (
              <tr
                key={employee.id}
                className="border-b hover:bg-gray-50 transition-colors"
              >
                <td className="p-3">{employee.id}</td>
                <td className="p-3">{employee.first_name}</td>
                <td className="p-3">{employee.last_name}</td>
                <td className="p-3">{employee.email}</td>
                <td className="p-3">{formatDate(employee.hire_date)}</td>
                <td className="p-3">
                  {employee.department_id ? departments.find(d => d.id === employee.department_id)?.name || 'Sin asignar' : 'Sin asignar'}
                </td>
                <td className="p-3">
                  {employee.role_id ? roles.find(r => r.id === employee.role_id)?.title || 'Sin asignar' : 'Sin asignar'}
                </td>
                <td className="p-3">
                  <Menu as="div" className="relative inline-block text-left">
                    <Menu.Button
                      ref={el => (menuButtons.current[index] = el)}
                      onClick={() => handleMenuOpen(index)}
                      className="bg-gray-200 text-gray-700 px-3 py-1 rounded-lg hover:bg-gray-300 transition-colors"
                    >
                      ...
                    </Menu.Button>
                    {currentMenuIndex === index && ReactDOM.createPortal(
                      <Menu.Items
                        static
                        ref={menuRef}
                        className="fixed bg-white rounded-lg shadow-lg z-50 w-48"
                        style={{
                          top: menuPosition.y,
                          left: menuPosition.x,
                          transform: menuPosition.direction === 'top' ? 'translateY(-100%)' : 'none',
                        }}
                      >
                        <div className="py-1">
                          <Menu.Item>
                            {({ active, close }) => (
                              <button
                                onClick={() => {
                                  openActionModal(employee, 'edit');
                                  close();
                                }}
                                className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-blue-500 text-white' : 'text-gray-700'} hover:bg-blue-500 hover:text-white`}
                              >
                                Editar
                              </button>
                            )}
                          </Menu.Item>
                          <Menu.Item>
                            {({ active, close }) => (
                              <button
                                onClick={() => {
                                  openActionModal(employee, 'delete');
                                  close();
                                }}
                                className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-red-500 text-white' : 'text-gray-700'} hover:bg-red-500 hover:text-white`}
                              >
                                Eliminar
                              </button>
                            )}
                          </Menu.Item>
                          <Menu.Item>
                            {({ active, close }) => (
                              <button
                                onClick={() => {
                                  openActionModal(employee, 'history');
                                  close();
                                }}
                                className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-green-500 text-white' : 'text-gray-700'} hover:bg-green-500 hover:text-white`}
                              >
                                Historial
                              </button>
                            )}
                          </Menu.Item>
                          {showInactive && (
                            <Menu.Item>
                              {({ active, close }) => (
                                <button
                                  onClick={() => {
                                    openActionModal(employee, 'restore');
                                    close();
                                  }}
                                  className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-green-500 text-white' : 'text-gray-700'} hover:bg-green-500 hover:text-white`}
                                >
                                  Restaurar
                                </button>
                              )}
                            </Menu.Item>
                          )}
                          <Menu.Item>
                            {({ active, close }) => (
                              <button
                                onClick={() => {
                                  fetchEmployeeProfile(employee.id);
                                  close();
                                }}
                                className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-primary text-white' : 'text-gray-700'} hover:bg-primary hover:text-white`}
                              >
                                Perfil
                              </button>
                            )}
                          </Menu.Item>
                        </div>
                      </Menu.Items>,
                      document.body
                    )}
                  </Menu>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default EmployeeTable;import React, { useState, useRef, useEffect } from 'react';
import { Menu } from '@headlessui/react';
import ReactDOM from 'react-dom';
import { formatDate } from '../utils/utils';

const DepartmentTable = ({
  departmentForm,
  setDepartmentForm,
  editDepartmentId,
  setEditDepartmentId,
  showInactive,
  setShowInactive,
  showAdvancedFilters,
  setShowAdvancedFilters,
  filters,
  setFilters,
  searchTerm,
  setSearchTerm,
  searchCriteria,
  setSearchCriteria,
  filteredDepartments,
  handleDepartmentSubmit,
  handleEdit,
  handleDelete,
  fetchDepartmentHistory,
  handleRestore,
  resetFilters,
  fetchDepartmentProfile,
}) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isActionModalOpen, setIsActionModalOpen] = useState(false);
  const [selectedDepartment, setSelectedDepartment] = useState(null);
  const [actionType, setActionType] = useState('');
  const [menuPosition, setMenuPosition] = useState({ x: 0, y: 0, direction: 'bottom' });
  const [currentMenuIndex, setCurrentMenuIndex] = useState(null);

  const menuButtons = useRef([]);
  const menuRef = useRef(null);

  const openModal = () => setIsModalOpen(true);
  const closeModal = () => {
    setIsModalOpen(false);
    setEditDepartmentId(null);
    setDepartmentForm({ name: '' }); // Solo 'name' basado en la estructura de la tabla
  };

  const openActionModal = (department, type) => {
    setSelectedDepartment(department);
    setActionType(type);
    setIsActionModalOpen(true);
  };

  const closeActionModal = () => {
    setIsActionModalOpen(false);
    setSelectedDepartment(null);
    setActionType('');
  };

  const confirmAction = () => {
    if (actionType === 'delete') {
      handleDelete('departments', selectedDepartment.id);
    } else if (actionType === 'restore') {
      handleRestore(selectedDepartment.id);
    } else if (actionType === 'history') {
      fetchDepartmentHistory(selectedDepartment.id);
    } else if (actionType === 'edit') {
      handleEdit('departments', selectedDepartment);
      setIsActionModalOpen(false);
      setIsModalOpen(true);
    } else if (actionType === 'profile') {
      fetchDepartmentProfile(selectedDepartment.id);
    }
    closeActionModal();
  };

  const handleMenuOpen = (index) => {
    const button = menuButtons.current[index];
    if (button) {
      const rect = button.getBoundingClientRect();
      const menuHeight = 200; // Aproximaci√≥n de la altura del men√∫ (8 √≠tems * 25px)
      const viewportHeight = window.innerHeight;
      const spaceBelow = viewportHeight - rect.bottom;

      // Forzar apertura hacia abajo por defecto en la parte superior, hacia arriba justo por encima en la parte inferior
      let direction = 'bottom';
      let y = rect.bottom + 8; // Posici√≥n justo debajo del bot√≥n

      // Si estamos en la mitad inferior o cerca del borde inferior, abrir hacia arriba justo por encima
      if (rect.top > viewportHeight / 2 || spaceBelow < menuHeight) {
        direction = 'top';
        y = rect.top - 8; // Posici√≥n justo por encima del bot√≥n
      }

      const x = rect.right - 192; // 192px es el ancho del men√∫ (w-48)

      setMenuPosition({ x, y, direction });
      setCurrentMenuIndex(index);
    }
  };

  const handleMenuClose = () => {
    setCurrentMenuIndex(null);
  };

  // Cierre del men√∫ al hacer clic fuera
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (menuRef.current && !menuRef.current.contains(event.target) && currentMenuIndex !== null) {
        handleMenuClose();
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [currentMenuIndex]);

  return (
    <div className="max-w-7xl mx-auto py-6">
      {/* Bot√≥n Flotante para A√±adir Departamento */}
      <button
        onClick={openModal}
        className="fixed bottom-6 right-6 bg-primary text-white p-4 rounded-full shadow-lg hover:bg-secondary transition-colors z-50"
      >
        + A√±adir Departamento
      </button>

      {/* Modal para A√±adir/Editar Departamento */}
      {isModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-lg">
            <h2 className="text-2xl font-bold text-primary mb-6">{editDepartmentId ? 'Editar Departamento' : 'A√±adir Departamento'}</h2>
            <form onSubmit={handleDepartmentSubmit}>
              <div className="grid grid-cols-1 gap-4">
                <input
                  name="name"
                  value={departmentForm.name}
                  onChange={(e) => setDepartmentForm({ ...departmentForm, name: e.target.value })}
                  placeholder="Nombre"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                  required
                />
              </div>
              <div className="flex gap-4 mt-6">
                <button
                  type="submit"
                  className="bg-primary text-white p-3 rounded-lg hover:bg-secondary transition-colors"
                >
                  {editDepartmentId ? 'Actualizar' : 'Agregar'} Departamento
                </button>
                <button
                  type="button"
                  onClick={closeModal}
                  className="bg-gray-500 text-white p-3 rounded-lg hover:bg-gray-600 transition-colors"
                >
                  Cancelar
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Modal para Confirmar Acciones */}
      {isActionModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h2 className="text-xl font-bold text-primary mb-4">
              {actionType === 'delete' ? 'Confirmar Eliminaci√≥n' : 
               actionType === 'restore' ? 'Confirmar Restauraci√≥n' : 
               actionType === 'history' ? 'Ver Historial' : 'Confirmar Acci√≥n'}
            </h2>
            <p className="text-gray-700 mb-6">
              {actionType === 'delete' ? `¬øEst√°s seguro de que deseas eliminar el departamento ${selectedDepartment.name}?` :
               actionType === 'restore' ? `¬øEst√°s seguro de que deseas restaurar el departamento ${selectedDepartment.name}?` :
               actionType === 'history' ? `Abriendo historial del departamento ${selectedDepartment.name}` :
               actionType === 'edit' ? `Editando el departamento ${selectedDepartment.name}` : 
               actionType === 'profile' ? `Ver perfil del departamento ${selectedDepartment.name}` : ''}
            </p>
            <div className="flex gap-4">
              <button
                onClick={confirmAction}
                className={`${actionType === 'delete' ? 'bg-red-500 hover:bg-red-600' : 'bg-primary hover:bg-secondary'} text-white p-3 rounded-lg transition-colors`}
              >
                {actionType === 'delete' ? 'Eliminar' : 
                 actionType === 'restore' ? 'Restaurar' : 
                 actionType === 'history' ? 'Abrir' : 
                 actionType === 'edit' ? 'Editar' : 
                 actionType === 'profile' ? 'Ver' : 'Confirmar'}
              </button>
              <button
                onClick={closeActionModal}
                className="bg-gray-500 text-white p-3 rounded-lg hover:bg-gray-600 transition-colors"
              >
                Cancelar
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Controles de Departamentos */}
      <div className="flex justify-between items-center mb-6">
        <div className="flex gap-4">
          <button
            className={`px-4 py-2 rounded-lg border ${!showInactive ? 'bg-primary text-white border-primary' : 'bg-gray-100 border-gray-300'} hover:bg-opacity-80 transition-colors`}
            onClick={() => { setShowInactive(false); resetFilters(); }}
          >
            üè¢ Activos
          </button>
          <button
            className={`px-4 py-2 rounded-lg border ${showInactive ? 'bg-primary text-white border-primary' : 'bg-gray-100 border-gray-300'} hover:bg-opacity-80 transition-colors`}
            onClick={() => { setShowInactive(true); resetFilters(); }}
          >
            üóëÔ∏è Inactivos
          </button>
        </div>
        <button
          className="bg-primary text-white px-4 py-2 rounded-lg hover:bg-secondary transition-colors"
          onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
        >
          {showAdvancedFilters ? 'Ocultar Filtros' : 'B√∫squeda Avanzada'} üîç
        </button>
      </div>

      {/* Filtros Avanzados */}
      {showAdvancedFilters && (
        <div className="bg-gray-50 p-4 rounded-lg mb-6 flex flex-wrap gap-4">
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="Buscar por nombre"
            className="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
          />
          <button
            onClick={resetFilters}
            className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors"
          >
            Restablecer Filtros
          </button>
        </div>
      )}

      {/* Barra de B√∫squeda */}
      <div className="flex gap-4 mb-6">
        <input
          type="text"
          placeholder="Buscar por nombre"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full max-w-xs p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
        />
      </div>

      {/* Tabla de Departamentos */}
      <div className="max-h-[500px] overflow-y-auto">
        <table className="w-full max-w-full bg-white rounded-lg shadow-lg">
          <thead>
            <tr className="bg-primary text-white sticky top-0 z-10">
              <th className="p-3 text-left">ID</th>
              <th className="p-3 text-left">Nombre</th>
              <th className="p-3 text-left">Acciones</th>
            </tr>
          </thead>
          <tbody>
            {filteredDepartments.map((department, index) => (
              <tr
                key={department.id}
                className="border-b hover:bg-gray-50 transition-colors"
              >
                <td className="p-3">{department.id}</td>
                <td className="p-3">{department.name}</td>
                <td className="p-3">
                  <Menu as="div" className="relative inline-block text-left">
                    <Menu.Button
                      ref={el => (menuButtons.current[index] = el)}
                      onClick={() => handleMenuOpen(index)}
                      className="bg-gray-200 text-gray-700 px-3 py-1 rounded-lg hover:bg-gray-300 transition-colors"
                    >
                      ...
                    </Menu.Button>
                    {currentMenuIndex === index && ReactDOM.createPortal(
                      <Menu.Items
                        static
                        ref={menuRef}
                        className="fixed bg-white rounded-lg shadow-lg z-50 w-48"
                        style={{
                          top: menuPosition.y,
                          left: menuPosition.x,
                          transform: menuPosition.direction === 'top' ? 'translateY(-100%)' : 'none',
                        }}
                      >
                        <div className="py-1">
                          <Menu.Item>
                            {({ active, close }) => (
                              <button
                                onClick={() => {
                                  openActionModal(department, 'edit');
                                  close();
                                }}
                                className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-blue-500 text-white' : 'text-gray-700'} hover:bg-blue-500 hover:text-white`}
                              >
                                Editar
                              </button>
                            )}
                          </Menu.Item>
                          <Menu.Item>
                            {({ active, close }) => (
                              <button
                                onClick={() => {
                                  openActionModal(department, 'delete');
                                  close();
                                }}
                                className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-red-500 text-white' : 'text-gray-700'} hover:bg-red-500 hover:text-white`}
                              >
                                Eliminar
                              </button>
                            )}
                          </Menu.Item>
                          <Menu.Item>
                            {({ active, close }) => (
                              <button
                                onClick={() => {
                                  openActionModal(department, 'history');
                                  close();
                                }}
                                className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-green-500 text-white' : 'text-gray-700'} hover:bg-green-500 hover:text-white`}
                              >
                                Historial
                              </button>
                            )}
                          </Menu.Item>
                          {showInactive && (
                            <Menu.Item>
                              {({ active, close }) => (
                                <button
                                  onClick={() => {
                                    openActionModal(department, 'restore');
                                    close();
                                  }}
                                  className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-green-500 text-white' : 'text-gray-700'} hover:bg-green-500 hover:text-white`}
                                >
                                  Restaurar
                                </button>
                              )}
                            </Menu.Item>
                          )}
                          <Menu.Item>
                            {({ active, close }) => (
                              <button
                                onClick={() => {
                                  openActionModal(department, 'profile');
                                  close();
                                }}
                                className={`w-full text-left px-4 py-2 text-sm ${active ? 'bg-primary text-white' : 'text-gray-700'} hover:bg-primary hover:text-white`}
                              >
                                Perfil
                              </button>
                            )}
                          </Menu.Item>
                        </div>
                      </Menu.Items>,
                      document.body
                    )}
                  </Menu>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default DepartmentTable;import { useState, useCallback, useEffect } from 'react';
import fetchWithToken from '../api/client';

export const useDepartments = (token, setNotification, isAuthenticated, userRole) => {
  const [departments, setDepartments] = useState([]);
  const [error, setError] = useState(null);

  const fetchDepartments = useCallback(async () => {
    if (!isAuthenticated || !token || userRole !== 'admin') {
      setDepartments([]); // No cargar si no es admin
      setError(null);
      return;
    }
    try {
      const response = await fetchWithToken('http://localhost:3001/departments');
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'Error fetching departments');
      }
      const data = await response.json();
      setDepartments(data);
      setError(null);
      if (data.length === 0) {
        setNotification({ message: 'No se encontraron departamentos', type: 'info' });
      }
    } catch (error) {
      console.error('Error fetching departments:', error);
      setError(error.message);
      setNotification({ message: error.message, type: 'error' });
    }
  }, [token, setNotification, isAuthenticated, userRole]);

  useEffect(() => {
    if (isAuthenticated && userRole === 'admin') {
      fetchDepartments();
    }
  }, [fetchDepartments, isAuthenticated, userRole]);

  const filteredDepartments = useCallback((departmentSearchTerm) => {
    return departments.filter(dept =>
      dept.name.toLowerCase().includes(departmentSearchTerm.toLowerCase())
    );
  }, [departments]);

  return { departments, fetchDepartments, filteredDepartments, error };
};import { useState, useEffect } from 'react';
import fetchWithToken from '../api/client';

export const useDashboard = (token, setNotification, isAuthenticated, userRole) => {
  const [dashboardData, setDashboardData] = useState({
    activeEmployees: 0,
    inactiveEmployees: 0,
    totalSalary: 0,
    departmentCount: 0,
  });
  const [chartData, setChartData] = useState([]); // Garantizar que sea un array por defecto
  const [error, setError] = useState(null);

  const fetchDashboardData = async () => {
    if (!isAuthenticated || userRole !== 'admin') {
      return;
    }
    try {
      const dashboardResponse = await fetchWithToken('http://localhost:3001/dashboard');
      if (!dashboardResponse.ok) {
        throw new Error('Error al cargar datos del dashboard');
      }
      const dashboardResult = await dashboardResponse.json();

      const chartResponse = await fetchWithToken('http://localhost:3001/dashboard/dept-distribution');
      if (!chartResponse.ok) {
        throw new Error('Error al cargar distribuci√≥n por departamentos');
      }
      const chartResult = await chartResponse.json();

      setDashboardData({
        activeEmployees: dashboardResult.activeEmployees || 0,
        inactiveEmployees: dashboardResult.inactiveEmployees || 0,
        totalSalary: dashboardResult.totalSalary || 0,
        departmentCount: dashboardResult.departmentCount || 0,
      });
      setChartData(Array.isArray(chartResult) ? chartResult : []); // Asegurar que chartData sea un array
      setError(null);
    } catch (err) {
      console.error('Error fetching dashboard data:', err);
      setError(err.message);
      setNotification({ message: `Error al cargar el dashboard: ${err.message}`, type: 'error' });
      setChartData([]); // En caso de error, establecer chartData como array vac√≠o
    }
  };

  useEffect(() => {
    if (isAuthenticated && userRole === 'admin') {
      fetchDashboardData();
    }
  }, [token, isAuthenticated, userRole]);

  return { dashboardData, chartData, error, fetchDashboardData };
};import { useState, useCallback, useEffect } from 'react';
import fetchWithToken from '../api/client';

export const useRoles = (token, setNotification, isAuthenticated, userRole) => {
  const [roles, setRoles] = useState([]);
  const [error, setError] = useState(null);

  const fetchRoles = useCallback(async () => {
    if (!isAuthenticated || !token || userRole !== 'admin') {
      setRoles([]); // No cargar si no es admin
      setError(null);
      return;
    }
    try {
      const response = await fetchWithToken('http://localhost:3001/roles');
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'Error fetching roles');
      }
      const data = await response.json();
      setRoles(data);
      setError(null);
      if (data.length === 0) {
        setNotification({ message: 'No se encontraron cargos', type: 'info' });
      }
    } catch (error) {
      console.error('Error fetching roles:', error);
      setError(error.message);
      setNotification({ message: error.message, type: 'error' });
    }
  }, [token, setNotification, isAuthenticated, userRole]);

  useEffect(() => {
    if (isAuthenticated && userRole === 'admin') {
      fetchRoles();
    }
  }, [fetchRoles, isAuthenticated, userRole]);

  const filteredRoles = useCallback((roleSearchTerm) => {
    return roles.filter(role =>
      role.title.toLowerCase().includes(roleSearchTerm.toLowerCase())
    );
  }, [roles]);

  return { roles, fetchRoles, filteredRoles, error };
};import { useState, useCallback, useEffect } from 'react';
import fetchWithToken from '../api/client';

export const useRecognitions = (token, setNotification, isAuthenticated, userRole) => {
  const [recognitions, setRecognitions] = useState([]);
  const [totalPages, setTotalPages] = useState(0);
  const [currentPage, setCurrentPage] = useState(1); // Inicializar en 1
  const [error, setError] = useState(null);

  const fetchRecognitions = useCallback(async (page = 1) => {
    if (!isAuthenticated || !token) {
      setError('No autenticado o token no proporcionado');
      return;
    }
    try {
      const response = await fetchWithToken(`http://localhost:3001/recognitions?page=${page}&limit=10`);
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'Error fetching recognitions');
      }
      const data = await response.json();
      setRecognitions(data.data);
      setTotalPages(Math.ceil(data.total / 10));
      setCurrentPage(page);
      setError(null);
      if (data.data.length === 0) {
        setNotification({ message: 'No se encontraron reconocimientos', type: 'info' });
      }
    } catch (error) {
      console.error('Error fetching recognitions:', error);
      setError(error.message);
      setNotification({ message: error.message, type: 'error' });
    }
  }, [token, setNotification, isAuthenticated]);

  useEffect(() => {
    if (isAuthenticated) {
      fetchRecognitions(currentPage);
    }
  }, [fetchRecognitions, isAuthenticated, currentPage]);

  return { recognitions, totalPages, currentPage, setCurrentPage, fetchRecognitions, error };
};import { useState, useCallback, useEffect } from 'react';
import fetchWithToken from '../api/client';

export const useEmployees = (token, showInactive, filters, departments, setNotification, isAuthenticated) => {
  const [employees, setEmployees] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchEmployees = useCallback(async () => {
    if (!isAuthenticated || !token) {
      setError('No autenticado o token no proporcionado');
      setLoading(false);
      return;
    }
    try {
      setLoading(true);
      const queryParams = new URLSearchParams({
        ...(filters.department_id && { department_id: filters.department_id }),
        ...(filters.hire_date_start && { hire_date_start: filters.hire_date_start }),
        ...(filters.hire_date_end && { hire_date_end: filters.hire_date_end }),
        ...(filters.salary_min && { salary_min: filters.salary_min }),
        ...(filters.salary_max && { salary_max: filters.salary_max }),
      }).toString();
      const url = showInactive
        ? `http://localhost:3001/employees/inactive?${queryParams}`
        : `http://localhost:3001/employees?${queryParams}`;
      const response = await fetchWithToken(url);
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'Error fetching employees');
      }
      const data = await response.json();
      const sortedEmployees = data.sort((a, b) => a.id - b.id);
      setEmployees(sortedEmployees);
      setError(null);
      if (sortedEmployees.length === 0) {
        setNotification({ message: 'No se encontraron empleados', type: 'info' });
      }
    } catch (error) {
      console.error('Error fetching employees:', error);
      setError(error.message);
      setNotification({ message: error.message, type: 'error' });
    } finally {
      setLoading(false);
    }
  }, [token, showInactive, filters.department_id, filters.hire_date_start, filters.hire_date_end, filters.salary_min, filters.salary_max, setNotification, isAuthenticated]);

  useEffect(() => {
    if (isAuthenticated) {
      fetchEmployees();
    }
  }, [fetchEmployees, isAuthenticated]);

  const filteredEmployees = useCallback((searchTerm, searchCriteria) => {
    return employees.filter(employee => {
      if (!searchTerm) return true;
      switch (searchCriteria) {
        case 'first_name':
          return employee.first_name.toLowerCase().includes(searchTerm.toLowerCase());
        case 'email':
          return employee.email.toLowerCase().includes(searchTerm.toLowerCase());
        case 'department':
          const deptName = departments.find(d => d.id === employee.department_id)?.name || '';
          return deptName.toLowerCase().includes(searchTerm.toLowerCase());
        default:
          return true;
      }
    });
  }, [employees, departments]);

  return { employees, fetchEmployees, filteredEmployees, loading, error };
};import { useState, useEffect, useCallback } from 'react';
import fetchWithToken from '../api/client';

export const useEmployeeProfile = (employeeId, setNotification, isAuthenticated, userRole) => {
  const [employee, setEmployee] = useState(null);
  const [history, setHistory] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchEmployeeData = useCallback(async () => {
    if (!isAuthenticated) {
      setError('Usuario no autenticado');
      return;
    }
    if (!employeeId || isNaN(employeeId)) {
      console.log('ID de empleado inv√°lido:', employeeId);
      setError('ID de empleado inv√°lido');
      return;
    }

    try {
      setLoading(true);
      
      // Obtener datos del empleado
      const employeeResponse = await fetchWithToken(`http://localhost:3001/employees/${employeeId}`);
      if (!employeeResponse.ok) {
        const errorText = await employeeResponse.text();
        throw new Error(`Error ${employeeResponse.status}: ${errorText || employeeResponse.statusText}`);
      }
      const employeeData = await employeeResponse.json();
      if (!employeeData || !employeeData.id) {
        throw new Error('Datos del empleado no v√°lidos');
      }
      setEmployee(employeeData);

      // Obtener historial de manera as√≠ncrona sin retrasar la carga principal
      setTimeout(async () => {
        try {
          const historyResponse = await fetchWithToken(`http://localhost:3001/employees/${employeeId}/history`);
          if (historyResponse.ok) {
            const historyData = await historyResponse.json();
            setHistory(historyData);
          }
        } catch (historyErr) {
          console.log('Historial no disponible:', historyErr.message);
        }
      }, 0);

      setError(null);
    } catch (err) {
      console.error('Error fetching employee data:', err);
      setError(err.message);
      setNotification({ message: `Error al cargar el perfil: ${err.message}`, type: 'error' });
    } finally {
      setLoading(false);
    }
  }, [employeeId, setNotification, isAuthenticated, userRole]);

  useEffect(() => {
    if (isAuthenticated && employeeId) {
      fetchEmployeeData();
    } else {
      setLoading(false);
      if (!employeeId) setError('No se proporcion√≥ un ID de empleado');
    }
  }, [fetchEmployeeData, isAuthenticated, employeeId]);

  return { employee, history, loading, error, fetchEmployeeData };
};import { useState, useEffect, useCallback } from 'react'; // A√±adir useCallback
import fetchWithToken from '../api/client';

export const useReports = (token, setNotification, isAuthenticated, userRole) => {
  const [salaryReport, setSalaryReport] = useState([]);
  const [error, setError] = useState(null);

  const fetchSalaryReport = useCallback(async () => {
    if (!isAuthenticated || userRole !== 'admin') {
      return; // No intentar fetch si no es admin
    }
    try {
      const response = await fetchWithToken('http://localhost:3001/reports/salaries-by-department');
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Error ${response.status}: ${errorText || response.statusText}`);
      }
      const data = await response.json();
      setSalaryReport(data);
      setError(null);
    } catch (err) {
      console.error('Error fetching salary report:', err);
      setError(err.message);
      if (!err.message.includes('Acceso denegado')) {
        setNotification({ message: `Error al cargar el reporte: ${err.message}`, type: 'error' });
      }
    }
  }, [isAuthenticated, userRole, setNotification]); // Dependencias de fetchSalaryReport

  useEffect(() => {
    if (isAuthenticated && userRole === 'admin') {
      fetchSalaryReport();
    }
  }, [token, isAuthenticated, userRole, fetchSalaryReport]);

  const exportToCSV = () => {
    if (!salaryReport.length) return;
    const headers = ['Departamento', 'Cantidad de Empleados', 'Salario Total', 'Salario Promedio'];
    const rows = salaryReport.map(row => [
      row.department_name,
      row.employee_count,
      row.total_salary ? row.total_salary.toFixed(2) : '0.00',
      row.avg_salary ? row.avg_salary.toFixed(2) : '0.00',
    ]);
    const csvContent = [headers, ...rows].map(e => e.join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'salary_report.csv';
    link.click();
  };

  return { salaryReport, exportToCSV, error };
};import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
const fetchWithToken = async (url, options = {}, navigate) => {
  const token = localStorage.getItem('token');
  // Eliminado: console.log('Token enviado en fetchWithToken:', token);

  const headers = {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${token}`,
    ...options.headers,
  };

  const attemptFetch = async (url, options, retries = 3, delay = 1000) => {
    try {
      const response = await fetch(url, options);
      if (response.status === 403) {
        const errorData = await response.json();
        console.log('Forbidden access:', errorData);
        if (url.includes('/history') || url.includes('/reports/salaries-by-department')) {
          return response; // Devolver respuesta sin reintentar
        }
        throw new Error(`Acceso denegado: ${JSON.stringify(errorData)}`);
      }
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || `Error ${response.status}`);
      }
      return response;
    } catch (error) {
      if (retries > 0 && !url.includes('/history') && !url.includes('/reports/salaries-by-department')) {
        console.log(`Fetch error: ${error.message}. Retrying in ${delay}ms... (${retries} retries left)`);
        await new Promise(resolve => setTimeout(resolve, delay));
        return attemptFetch(url, options, retries - 1, delay);
      }
      throw error;
    }
  };

  try {
    const response = await attemptFetch(url, { ...options, headers });
    return response;
  } catch (error) {
    if (error.message.includes('Token inv√°lido') || error.message.includes('Token no proporcionado')) {
      localStorage.removeItem('token');
      if (navigate) navigate('/');
    }
    throw error;
  }
};

export default fetchWithToken;// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
import React, { useState, useEffect, useCallback } from 'react';
import { BrowserRouter, useNavigate } from 'react-router-dom';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';
import Sidebar from './components/Sidebar';
import EmployeeTable from './components/EmployeeTable';
import DepartmentTable from './components/DepartmentTable';
import RoleTable from './components/RoleTable';
import Dashboard from './components/Dashboard';
import Reports from './components/Reports';
import RecognitionPanel from './components/RecognitionPanel';
import HistoryModal from './components/HistoryModal';
import EmployeeProfile from './components/EmployeeProfile';
import Login from './components/Login';
import ChangePassword from './components/ChangePassword';
import fetchWithToken from './api/client';
import { useEmployees } from './hooks/useEmployees';
import { useDepartments } from './hooks/useDepartments';
import { useRoles } from './hooks/useRoles';
import { useDashboard } from './hooks/useDashboard';
import { useReports } from './hooks/useReports';
import { useRecognitions } from './hooks/useRecognitions';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, info) {
    console.error('Error caught by ErrorBoundary:', error, info);
  }

  render() {
    if (this.state.hasError) {
      return <h1 className="text-center text-red-500">Algo sali√≥ mal. Por favor, recarga la p√°gina.</h1>;
    }
    return this.props.children;
  }
}

const Header = ({ userRole, userRoles, setUserRole, onLogout }) => {
  const navigate = useNavigate();
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('userRole');
    localStorage.removeItem('userRoles');
    localStorage.removeItem('employeeId');
    onLogout();
    navigate('/');
  };

  const handleRoleChange = (newRole) => {
    setUserRole(newRole);
    localStorage.setItem('userRole', newRole);
    navigate(newRole === 'employee' ? '/profile' : '/dashboard');
    setIsDropdownOpen(false);
  };

  return (
    <div className="fixed top-0 left-0 right-0 bg-primary text-white p-4 shadow-md z-10">
      <div className="container mx-auto flex justify-between items-center">
        {/* Logo o T√≠tulo */}
        <div className="flex items-center gap-4">
          <h1 className="text-xl font-bold">HR System</h1>
        </div>

        {/* Barra de B√∫squeda */}
        <div className="flex-1 mx-4">
          <input
            type="text"
            placeholder="Buscar..."
            className="w-full max-w-md p-2 rounded-lg bg-white text-gray-800 focus:outline-none focus:ring-2 focus:ring-white"
          />
        </div>

        {/* Opciones de Usuario */}
        <div className="flex items-center gap-4">
          {/* Cambio de Rol */}
          {userRoles && userRoles.length > 1 ? (
            <div className="relative">
              <button
                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                className="flex items-center gap-2 bg-white text-primary p-2 rounded-lg hover:bg-gray-100"
              >
                <span>{userRole === 'admin' ? 'üëë Admin' : 'üë§ Empleado'}</span>
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              {isDropdownOpen && (
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg z-20">
                  {userRoles.map(role => (
                    <button
                      key={role}
                      onClick={() => handleRoleChange(role)}
                      className="block w-full text-left px-4 py-2 text-gray-800 hover:bg-gray-100"
                    >
                      {role === 'admin' ? 'üëë Admin' : 'üë§ Empleado'}
                    </button>
                  ))}
                </div>
              )}
            </div>
          ) : (
            <span className="text-lg">{userRole === 'admin' ? 'üëë Admin' : 'üë§ Empleado'}</span>
          )}

          {/* Notificaciones */}
          <button className="relative">
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
            </svg>
            <span className="absolute top-0 right-0 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">3</span>
          </button>

          {/* Avatar de Usuario */}
          <button onClick={handleLogout} className="flex items-center gap-2 hover:bg-gray-700 p-2 rounded-lg">
            <div className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center">
              <span className="text-gray-500">üë§</span>
            </div>
            <span>Cerrar Sesi√≥n</span>
          </button>
        </div>
      </div>
    </div>
  );
};

function App() {
  const navigate = useNavigate();
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [userRole, setUserRole] = useState(null);
  const [userRoles, setUserRoles] = useState([]);
  const [employeeId, setEmployeeId] = useState(null);
  const [token, setToken] = useState(null);
  const [forcePasswordChange, setForcePasswordChange] = useState(false);
  const [email, setEmail] = useState('');
  const [employeeForm, setEmployeeForm] = useState({ first_name: '', last_name: '', email: '', hire_date: '', department_id: '', role_id: '' });
  const [departmentForm, setDepartmentForm] = useState({ name: '' });
  const [roleForm, setRoleForm] = useState({ title: '', salary: '' });
  const [editEmployeeId, setEditEmployeeId] = useState(null);
  const [editDepartmentId, setEditDepartmentId] = useState(null);
  const [editRoleId, setEditRoleId] = useState(null);
  const [activeTab, setActiveTab] = useState('employees');
  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [searchCriteria, setSearchCriteria] = useState('first_name');
  const [departmentSearchTerm, setDepartmentSearchTerm] = useState('');
  const [roleSearchTerm, setRoleSearchTerm] = useState('');
  const [notification, setNotification] = useState({ message: '', type: '' });
  const [showInactive, setShowInactive] = useState(false);
  const [filters, setFilters] = useState({
    department_id: '',
    hire_date_start: '',
    hire_date_end: '',
    salary_min: '',
    salary_max: '',
  });
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const [showHistoryModal, setShowHistoryModal] = useState(false);
  const [currentEmployeeId, setCurrentEmployeeId] = useState(null);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const [recognitionPage, setRecognitionPage] = useState(1);

  const showNotification = useCallback((message, type) => {
    const messageString = typeof message === 'string' ? message : (message.message || JSON.stringify(message));
    setNotification({ message: messageString, type });
    setTimeout(() => setNotification({ message: '', type: '' }), 3000);
  }, []);

  useEffect(() => {
    const verifyToken = async () => {
      const savedToken = localStorage.getItem('token');
      if (!savedToken) {
        setIsAuthenticated(false);
        navigate('/');
        setIsInitialLoad(false);
        return;
      }

      try {
        const response = await fetchWithToken('http://localhost:3001/auth/verify', {}, navigate);
        if (!response.ok) {
          throw new Error('Token inv√°lido o expirado');
        }
        await response.json();
        const decodedToken = JSON.parse(atob(savedToken.split('.')[1]));
        setIsAuthenticated(true);
        setToken(savedToken);
        const role = localStorage.getItem('userRole') || decodedToken.roles[0] || 'employee';
        setUserRole(role);
        setUserRoles(JSON.parse(localStorage.getItem('userRoles')) || decodedToken.roles || ['employee']);
        setEmployeeId(decodedToken.employee_id || localStorage.getItem('employeeId'));
        setEmail(localStorage.getItem('rememberedEmail') || '');
        setForcePasswordChange(false);
        setActiveTab(role === 'employee' ? 'employee-profile' : 'dashboard');
        setSelectedEmployeeId(role === 'employee' ? decodedToken.employee_id : null);
      } catch (error) {
        console.error('Token verification failed:', error.message);
        localStorage.removeItem('token');
        localStorage.removeItem('userRole');
        localStorage.removeItem('userRoles');
        localStorage.removeItem('employeeId');
        setIsAuthenticated(false);
        setToken(null);
        setUserRole(null);
        setUserRoles([]);
        setEmployeeId(null);
        setForcePasswordChange(false);
        navigate('/');
      } finally {
        setIsInitialLoad(false);
      }
    };

    verifyToken();
  }, [navigate]);

  const { departments, fetchDepartments, filteredDepartments, error: deptError } = useDepartments(token, showNotification, isAuthenticated, userRole);
  const { roles, fetchRoles, filteredRoles, error: rolesError } = useRoles(token, showNotification, isAuthenticated, userRole);
  const { employees, fetchEmployees, filteredEmployees, error: empError } = useEmployees(token, showInactive, filters, departments, showNotification, isAuthenticated, userRole);
  const { dashboardData, chartData, error: dashError, fetchDashboardData } = useDashboard(token, showNotification, isAuthenticated, userRole);
  const { salaryReport, exportToCSV, error: reportError } = useReports(token, showNotification, isAuthenticated, userRole);
  const { recognitions, totalPages, fetchRecognitions, error: recError } = useRecognitions(token, showNotification, isAuthenticated, userRole);

  useEffect(() => {
    if (activeTab === 'recognitions' && isAuthenticated) {
      fetchRecognitions(recognitionPage);
    }
  }, [recognitionPage, fetchRecognitions, activeTab, isAuthenticated]);

  const resetFilters = () => {
    setFilters({
      department_id: '',
      hire_date_start: '',
      hire_date_end: '',
      salary_min: '',
      salary_max: '',
    });
  };

  const handleEmployeeSubmit = async (e) => {
    e.preventDefault();
    try {
      const employeeData = {
        first_name: employeeForm.first_name,
        last_name: employeeForm.last_name,
        email: employeeForm.email,
        hire_date: employeeForm.hire_date,
        department_id: parseInt(employeeForm.department_id) || null,
        role_id: parseInt(employeeForm.role_id) || null,
      };

      let url = 'http://localhost:3001/employees';
      let method = 'POST';
      let successMessage = 'Empleado a√±adido con √©xito';

      if (editEmployeeId) {
        url = `http://localhost:3001/employees/${editEmployeeId}`;
        method = 'PUT';
        successMessage = 'Empleado actualizado con √©xito';
      }

      const response = await fetchWithToken(url, {
        method: method,
        body: JSON.stringify(employeeData),
      }, navigate);

      const data = await response.json();

      fetchEmployees();
      setEmployeeForm({ first_name: '', last_name: '', email: '', hire_date: '', department_id: '', role_id: '' });
      setEditEmployeeId(null);
      if (method === 'POST' && data.tempPassword) {
        showNotification(
          `${successMessage}. Contrase√±a temporal: ${data.tempPassword} (enviada por correo a ${employeeData.email})`,
          'success'
        );
      } else {
        showNotification(successMessage, 'success');
      }
    } catch (error) {
      console.error('Error submitting employee:', error.message);
      showNotification(`Error al guardar el empleado: ${error.message}`, 'error');
    }
  };

  const handleDepartmentSubmit = async (e) => {
    e.preventDefault();
    try {
      const url = editDepartmentId ? `http://localhost:3001/departments/${editDepartmentId}` : 'http://localhost:3001/departments';
      const method = editDepartmentId ? 'PUT' : 'POST';
      const response = await fetchWithToken(url, {
        method,
        body: JSON.stringify(departmentForm),
      });
      if (!response.ok) throw new Error('Error en la solicitud');
      await fetchDepartments(token);
      setDepartmentForm({ name: '' });
      setEditDepartmentId(null);
      showNotification(editDepartmentId ? 'Departamento actualizado con √©xito' : 'Departamento a√±adido con √©xito', 'success');
    } catch (error) {
      console.error('Error submitting department:', error);
      showNotification('Error al guardar el departamento', 'error');
    }
  };

  const handleRoleSubmit = async (e) => {
    e.preventDefault();
    try {
      const url = editRoleId ? `http://localhost:3001/roles/${editRoleId}` : 'http://localhost:3001/roles';
      const method = editRoleId ? 'PUT' : 'POST';
      const response = await fetchWithToken(url, {
        method,
        body: JSON.stringify(roleForm),
      });
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Error ${response.status}: ${errorText}`);
      }
      await fetchRoles(token);
      setRoleForm({ title: '', salary: '' });
      setEditRoleId(null);
      showNotification(editRoleId ? 'Cargo actualizado con √©xito' : 'Cargo a√±adido con √©xito', 'success');
    } catch (error) {
      console.error('Error submitting role:', error);
      showNotification('Error al guardar el cargo', 'error');
    }
  };

  const handleDelete = async (type, id) => {
    try {
      const response = await fetchWithToken(`http://localhost:3001/${type}/${id}`, { method: 'DELETE' });
      if (!response.ok) {
        const errorText = await response.text();
        let errorMessage = 'Error en la solicitud';
        try {
          const errorData = JSON.parse(errorText);
          errorMessage = errorData.error || errorMessage;
        } catch (jsonError) {
          errorMessage = errorText || errorMessage;
        }
        throw new Error(errorMessage);
      }
      if (type === 'employees') {
        await fetchEmployees(token);
        if (editEmployeeId === id) {
          setEmployeeForm({ first_name: '', last_name: '', email: '', hire_date: '', department_id: '', role_id: '' });
          setEditEmployeeId(null);
        }
        if (userRole === 'admin') {
          await fetchDashboardData();
        }
      }
      if (type === 'departments') await fetchDepartments(token);
      if (type === 'roles') await fetchRoles(token);
      showNotification(
        `${type === 'employees' ? 'Empleado' : type === 'departments' ? 'Departamento' : 'Cargo'} eliminado con √©xito`,
        'success'
      );
    } catch (error) {
      console.error(`Error deleting ${type}:`, error);
      showNotification(
        `Error al eliminar el ${type === 'employees' ? 'empleado' : type === 'departments' ? 'departamento' : 'cargo'}: ${error.message}`,
        'error'
      );
    }
  };

  const handleEdit = (type, item) => {
    if (type === 'employees') {
      const hireDate = new Date(item.hire_date);
      hireDate.setUTCDate(hireDate.getUTCDate() + 1);
      const year = hireDate.getUTCFullYear();
      const month = String(hireDate.getUTCMonth() + 1).padStart(2, '0');
      const day = String(hireDate.getUTCDate()).padStart(2, '0');
      const formattedDate = `${year}-${month}-${day}`;

      setEmployeeForm({
        ...item,
        department_id: item.department_id?.toString() || '',
        role_id: item.role_id?.toString() || '',
        hire_date: formattedDate,
      });
      setEditEmployeeId(item.id);
      showNotification('Editando empleado', 'info');
    } else if (type === 'departments') {
      setDepartmentForm(item);
      setEditDepartmentId(item.id);
      showNotification('Editando departamento', 'info');
    } else if (type === 'roles') {
      setRoleForm({ title: item.title, salary: item.salary.toString() });
      setEditRoleId(item.id);
      showNotification('Editando cargo', 'info');
    }
  };

  const handleRestore = async (id) => {
    try {
      const response = await fetchWithToken(`http://localhost:3001/employees/${id}/restore`, { method: 'PUT' });
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'Error al restaurar el empleado');
      }
      await fetchEmployees(token);
      if (userRole === 'admin') {
        await fetchDashboardData();
      }
      showNotification('Empleado restaurado con √©xito', 'success');
    } catch (error) {
      console.error('Error restoring employee:', error);
      showNotification(`Error al restaurar: ${error.message}`, 'error');
    }
  };

  const fetchEmployeeProfile = (id) => {
    if (userRole === 'employee' && id !== employeeId) {
      showNotification('Solo puedes ver tu propio perfil', 'error');
      return;
    }
    setSelectedEmployeeId(id);
    setActiveTab('employee-profile');
  };

  useEffect(() => {
    const rememberedEmail = localStorage.getItem('rememberedEmail');
    if (rememberedEmail) setEmail(rememberedEmail);
  }, []);

  useEffect(() => {
    if (activeTab !== 'employees') {
      setShowAdvancedFilters(false);
    }
  }, [activeTab]);

  useEffect(() => {
    if (activeTab !== 'employees') {
      resetFilters();
    }
  }, [activeTab]);

  useEffect(() => {
    if (activeTab === 'recognitions' && isAuthenticated) {
      fetchRecognitions(recognitionPage);
    }
  }, [activeTab, recognitionPage, fetchRecognitions, token, isAuthenticated]);

  useEffect(() => {
    const handleEsc = (event) => {
      if (event.key === 'Escape' && showHistoryModal) {
        setShowHistoryModal(false);
      }
    };
    window.addEventListener('keydown', handleEsc);
    return () => {
      window.removeEventListener('keydown', handleEsc);
    };
  }, [showHistoryModal]);

  if (isInitialLoad) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100">
        <p className="text-gray-500 text-lg">Cargando...</p>
      </div>
    );
  }

  if (forcePasswordChange) {
    return (
      <ChangePassword
        user={{ token, id: employeeId, email }}
        setUser={(updatedUser) => {
          setForcePasswordChange(updatedUser.force_password_change);
          setToken(updatedUser.token || token);
          if (updatedUser.token) {
            localStorage.setItem('token', updatedUser.token);
            const newDecodedToken = JSON.parse(atob(updatedUser.token.split('.')[1]));
            setEmployeeId(newDecodedToken.employee_id);
            setUserRole(newDecodedToken.roles[0] || 'employee');
            setUserRoles(newDecodedToken.roles || ['employee']);
            localStorage.setItem('employeeId', newDecodedToken.employee_id);
            localStorage.setItem('userRole', newDecodedToken.roles[0] || 'employee');
            localStorage.setItem('userRoles', JSON.stringify(newDecodedToken.roles || ['employee']));
          }
          if (!updatedUser.force_password_change) {
            setIsAuthenticated(true);
            setActiveTab((userRole || 'employee') === 'employee' ? 'employee-profile' : 'dashboard');
          }
        }}
        setNotification={showNotification}
      />
    );
  }

  if (!isAuthenticated) {
    return (
      <Login
        setIsAuthenticated={setIsAuthenticated}
        setUserRole={setUserRole}
        setUserRoles={setUserRoles}
        setEmployeeId={setEmployeeId}
        setEmail={setEmail}
        setToken={setToken}
        setForcePasswordChange={setForcePasswordChange}
      />
    );
  }

  return (
    <div className="flex min-h-screen bg-gray-50">
      <Header
        userRole={userRole}
        userRoles={userRoles}
        setUserRole={setUserRole}
        onLogout={() => {
          setIsAuthenticated(false);
          setToken(null);
          setUserRole(null);
          setUserRoles([]);
          setEmployeeId(null);
          setForcePasswordChange(false);
        }}
      />
      <Sidebar activeTab={activeTab} setActiveTab={setActiveTab} userRole={userRole} />
      <div className="flex-1 pt-16 px-8">
        <div className="max-w-5xl mx-auto">
          {activeTab === 'change-password' && (
            <ChangePassword
              user={{ token, id: employeeId, email }}
              setUser={(updatedUser) => {
                setForcePasswordChange(updatedUser.force_password_change);
                setToken(updatedUser.token || token);
                if (updatedUser.token) {
                  localStorage.setItem('token', updatedUser.token);
                  const newDecodedToken = JSON.parse(atob(updatedUser.token.split('.')[1]));
                  setEmployeeId(newDecodedToken.employee_id);
                  setUserRole(newDecodedToken.roles[0] || 'employee');
                  setUserRoles(newDecodedToken.roles || ['employee']);
                  localStorage.setItem('employeeId', newDecodedToken.employee_id);
                  localStorage.setItem('userRole', newDecodedToken.roles[0] || 'employee');
                  localStorage.setItem('userRoles', JSON.stringify(newDecodedToken.roles || ['employee']));
                }
                if (!updatedUser.force_password_change) {
                  setIsAuthenticated(true);
                  setActiveTab((userRole || 'employee') === 'employee' ? 'employee-profile' : 'dashboard');
                }
              }}
              setNotification={showNotification}
            />
          )}
          {activeTab === 'employees' && userRole === 'admin' && (
            <EmployeeTable
              employeeForm={employeeForm}
              setEmployeeForm={setEmployeeForm}
              departments={departments}
              roles={roles}
              editEmployeeId={editEmployeeId}
              setEditEmployeeId={setEditEmployeeId}
              showInactive={showInactive}
              setShowInactive={setShowInactive}
              showAdvancedFilters={showAdvancedFilters}
              setShowAdvancedFilters={setShowAdvancedFilters}
              filters={filters}
              setFilters={setFilters}
              searchTerm={searchTerm}
              setSearchTerm={setSearchTerm}
              searchCriteria={searchCriteria}
              setSearchCriteria={setSearchCriteria}
              filteredEmployees={filteredEmployees(searchTerm, searchCriteria)}
              handleEmployeeSubmit={handleEmployeeSubmit}
              handleEdit={handleEdit}
              handleDelete={handleDelete}
              fetchEmployeeHistory={(id) => {
                setCurrentEmployeeId(id);
                setShowHistoryModal(true);
              }}
              handleRestore={handleRestore}
              resetFilters={resetFilters}
              fetchEmployeeProfile={fetchEmployeeProfile}
              userRole={userRole}
              error={empError}
            />
          )}
          {activeTab === 'departments' && userRole === 'admin' && (
            <DepartmentTable
              departmentForm={departmentForm}
              setDepartmentForm={setDepartmentForm}
              editDepartmentId={editDepartmentId}
              setEditDepartmentId={setEditDepartmentId}
              departmentSearchTerm={departmentSearchTerm}
              setDepartmentSearchTerm={setDepartmentSearchTerm}
              filteredDepartments={filteredDepartments(departmentSearchTerm)}
              handleDepartmentSubmit={handleDepartmentSubmit}
              handleEdit={handleEdit}
              handleDelete={handleDelete}
              error={deptError}
            />
          )}
          {activeTab === 'roles' && userRole === 'admin' && (
            <RoleTable
              roleForm={roleForm}
              setRoleForm={setRoleForm}
              editRoleId={editRoleId}
              setEditRoleId={setEditRoleId}
              roleSearchTerm={roleSearchTerm}
              setRoleSearchTerm={setRoleSearchTerm}
              filteredRoles={filteredRoles(roleSearchTerm)}
              handleRoleSubmit={handleRoleSubmit}
              handleEdit={handleEdit}
              handleDelete={handleDelete}
              error={rolesError}
            />
          )}
          {activeTab === 'dashboard' && userRole === 'admin' && (
            <Dashboard
              dashboardData={dashboardData}
              chartData={chartData}
              error={dashError}
            />
          )}
          {activeTab === 'reports' && userRole === 'admin' && (
            <Reports
              salaryReport={salaryReport}
              exportToCSV={exportToCSV}
              error={reportError}
            />
          )}
          {activeTab === 'recognitions' && (
            <RecognitionPanel
              employees={employees}
              setNotification={showNotification}
              fetchRecognitions={() => fetchRecognitions(recognitionPage)}
              currentPage={recognitionPage}
              setCurrentPage={setRecognitionPage}
              recognitions={recognitions}
              totalPages={totalPages}
              userRole={userRole}
              error={recError}
            />
          )}
          {activeTab === 'employee-profile' && (
            <EmployeeProfile
              employeeId={selectedEmployeeId || (userRole === 'employee' ? employeeId : null)}
              setNotification={showNotification}
              departments={departments}
              roles={roles}
              setSelectedEmployeeId={setSelectedEmployeeId}
              userRole={userRole}
              isAuthenticated={isAuthenticated}
            />
          )}
          <HistoryModal
            employees={employees}
            currentEmployeeId={currentEmployeeId}
            showHistoryModal={showHistoryModal}
            setShowHistoryModal={setShowHistoryModal}
          />
        </div>
      </div>
      {notification.message && (
        <div className={`fixed top-20 right-4 p-4 rounded-lg shadow-lg transform transition-all duration-300 ${notification.type === 'success' ? 'bg-green-500' : notification.type === 'info' ? 'bg-blue-500' : 'bg-red-500'} text-white animate-slide-in`}>
          {notification.message}
        </div>
      )}
    </div>
  );
}

const AppWrapper = () => (
  <BrowserRouter>
    <ErrorBoundary>
      <App />
    </ErrorBoundary>
  </BrowserRouter>
);

export default AppWrapper;const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const nodemailer = require('nodemailer');
const app = express();

app.use(express.json());
app.use(cors());

const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'hr_db',
  password: 'admin',
  port: 5432,
});

const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'sk1permd@gmail.com',
    pass: 'owkq qauw jbxw tury',
  },
});

app.get('/test-db', async (req, res) => {
  try {
    const result = await pool.query('SELECT NOW()');
    res.send(`Conexi√≥n exitosa: ${result.rows[0].now}`);
  } catch (err) {
    res.status(500).send(`Error: ${err.message}`);
  }
});

const JWT_SECRET = 'tu_clave_secreta_very_secure';

const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'Token no proporcionado' });

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ error: 'Token inv√°lido' });
    req.user = user;
    next();
  });
};

const authorizeRole = (role) => (req, res, next) => {
  if (!req.user.roles || !req.user.roles.includes(role)) {
    return res.status(403).json({ error: 'Acceso denegado: No tienes permisos suficientes' });
  }
  next();
};

app.post('/login', async (req, res) => {
  const { email, password } = req.body;
  try {
    const { rows } = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
    if (rows.length === 0) {
      return res.status(401).json({ success: false, message: 'Credenciales no v√°lidas' });
    }

    const user = rows[0];
    const match = await bcrypt.compare(password, user.password);
    if (!match) {
      return res.status(401).json({ success: false, message: 'Credenciales no v√°lidas' });
    }

    const rolesResult = await pool.query('SELECT role FROM user_roles WHERE user_id = $1', [user.id]);
    const roles = rolesResult.rows.map(row => row.role);

    if (user.force_password_change) {
      return res.status(403).json({ success: false, message: 'Debes cambiar tu contrase√±a', userId: user.id });
    }

    const token = jwt.sign(
      { user_id: user.id, employee_id: user.employee_id, email: user.email, roles: roles.length > 0 ? roles : ['employee'] },
      JWT_SECRET,
      { expiresIn: '1h' }
    );
    console.log('Token generado en /login:', { user_id: user.id, employee_id: user.employee_id, email, roles });
    res.json({ success: true, token });
  } catch (error) {
    console.error('Error en login:', error);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
});

app.put('/change-password', async (req, res) => {
  const { email, oldPassword, newPassword } = req.body;

  try {
    if (!email || !oldPassword || !newPassword) {
      return res.status(400).json({ error: 'Faltan campos requeridos: email, oldPassword, newPassword' });
    }

    const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Usuario no encontrado' });
    }

    const user = result.rows[0];
    const match = await bcrypt.compare(oldPassword, user.password);
    if (!match) {
      return res.status(401).json({ error: 'Contrase√±a antigua incorrecta' });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    await pool.query(
      'UPDATE users SET password = $1, force_password_change = FALSE WHERE id = $2',
      [hashedPassword, user.id]
    );

    const rolesResult = await pool.query('SELECT role FROM user_roles WHERE user_id = $1', [user.id]);
    const roles = rolesResult.rows.map(row => row.role);
    const token = jwt.sign(
      { user_id: user.id, employee_id: user.employee_id, email: user.email, roles: roles.length > 0 ? roles : ['employee'] },
      JWT_SECRET,
      { expiresIn: '1h' }
    );
    console.log('Token generado en /change-password:', { user_id: user.id, employee_id: user.employee_id, email, roles });
    res.json({ message: 'Contrase√±a actualizada con √©xito', token });
  } catch (err) {
    console.error('Error en PUT /change-password:', err);
    res.status(500).json({ error: err.message });
  }
});

app.get('/employees/inactive', authenticateToken, authorizeRole('admin'), async (req, res) => {
  try {
    const { department_id, hire_date_start, hire_date_end, salary_min, salary_max } = req.query;
    let query = 'SELECT e.*, r.salary FROM employees e JOIN roles r ON e.role_id = r.id WHERE e.is_active = FALSE';
    const values = [];

    if (department_id) {
      query += ` AND e.department_id = $${values.length + 1}`;
      values.push(department_id);
    }
    if (hire_date_start) {
      query += ` AND e.hire_date >= $${values.length + 1}`;
      values.push(hire_date_start);
    }
    if (hire_date_end) {
      query += ` AND e.hire_date <= $${values.length + 1}`;
      values.push(hire_date_end);
    }
    if (salary_min) {
      query += ` AND r.salary >= $${values.length + 1}`;
      values.push(salary_min);
    }
    if (salary_max) {
      query += ` AND r.salary <= $${values.length + 1}`;
      values.push(salary_max);
    }

    const result = await pool.query(query, values);
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching inactive employees:', error);
    res.status(500).json({ error: error.message });
  }
});

app.get('/employees', authenticateToken, async (req, res) => {
  try {
    const { department_id, hire_date_start, hire_date_end, salary_min, salary_max } = req.query;
    let query = `
      SELECT e.*, r.salary, d.name AS department_name, r.title AS role_title
      FROM employees e
      JOIN roles r ON e.role_id = r.id
      LEFT JOIN departments d ON e.department_id = d.id
      WHERE e.is_active = TRUE
    `;
    const values = [];

    if (req.query.inactive === 'true') {
      if (!req.user.roles.includes('admin')) {
        return res.status(403).json({ error: 'Acceso denegado: Solo admins pueden ver empleados inactivos' });
      }
      query = `
        SELECT e.*, r.salary, d.name AS department_name, r.title AS role_title
        FROM employees e
        JOIN roles r ON e.role_id = r.id
        LEFT JOIN departments d ON e.department_id = d.id
        WHERE e.is_active = FALSE
      `;
    } else if (!req.user.roles.includes('admin')) {
      query += ' AND e.id = $1';
      values.push(req.user.employee_id);
    }

    if (department_id) {
      query += ` AND e.department_id = $${values.length + 1}`;
      values.push(department_id);
    }
    if (hire_date_start) {
      query += ` AND e.hire_date >= $${values.length + 1}`;
      values.push(hire_date_start);
    }
    if (hire_date_end) {
      query += ` AND e.hire_date <= $${values.length + 1}`;
      values.push(hire_date_end);
    }
    if (salary_min) {
      query += ` AND r.salary >= $${values.length + 1}`;
      values.push(salary_min);
    }
    if (salary_max) {
      query += ` AND r.salary <= $${values.length + 1}`;
      values.push(salary_max);
    }

    query += ' ORDER BY e.id ASC';
    const result = await pool.query(query, values);
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching employees:', error);
    res.status(500).json({ error: error.message });
  }
});

app.get('/employees/:id', authenticateToken, async (req, res) => {
  const { id } = req.params;
  try {
    if (!req.user.roles.includes('admin') && req.user.employee_id !== parseInt(id)) {
      return res.status(403).json({ error: 'Acceso denegado: Solo puedes ver tu propio perfil o necesitas permisos de admin' });
    }
    const result = await pool.query(`
      SELECT e.*, d.name AS department_name, r.title AS role_title, r.salary
      FROM employees e
      LEFT JOIN departments d ON e.department_id = d.id
      JOIN roles r ON e.role_id = r.id
      WHERE e.id = $1 AND e.is_active = TRUE
    `, [id]);
    if (result.rows.length === 0) return res.status(404).send('Empleado no encontrado');
    res.json(result.rows[0]);
  } catch (err) {
    console.error('Error en GET /employees/:id:', err);
    res.status(500).send(`Error: ${err.message}`);
  }
});

app.get('/dashboard', authenticateToken, authorizeRole('admin'), async (req, res) => {
  try {
    const activeEmployees = await pool.query('SELECT COUNT(*) FROM employees WHERE is_active = TRUE');
    const inactiveEmployees = await pool.query('SELECT COUNT(*) FROM employees WHERE is_active = FALSE');
    const totalSalary = await pool.query('SELECT SUM(r.salary) FROM employees e JOIN roles r ON e.role_id = r.id WHERE e.is_active = TRUE');
    const deptCount = await pool.query('SELECT COUNT(*) FROM departments');

    res.json({
      activeEmployees: parseInt(activeEmployees.rows[0].count),
      inactiveEmployees: parseInt(inactiveEmployees.rows[0].count),
      totalSalary: parseFloat(totalSalary.rows[0].sum || 0),
      departmentCount: parseInt(deptCount.rows[0].count),
    });
  } catch (error) {
    console.error('Error fetching dashboard data:', error);
    res.status(500).json({ error: error.message });
  }
});

app.get('/dashboard/dept-distribution', authenticateToken, authorizeRole('admin'), async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT d.name, COUNT(e.id) as employee_count
      FROM departments d
      LEFT JOIN employees e ON d.id = e.department_id AND e.is_active = TRUE
      GROUP BY d.id, d.name
    `);
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching dept distribution:', error);
    res.status(500).json({ error: error.message });
  }
});

app.post('/employees', authenticateToken, authorizeRole('admin'), async (req, res) => {
  const { first_name, last_name, email, hire_date, department_id, role_id } = req.body;

  try {
    console.log('Inicio de POST /employees');
    console.log('Datos recibidos:', { first_name, last_name, email, hire_date, department_id, role_id });

    if (!first_name || !last_name || !email || !hire_date) {
      console.log('Faltan campos obligatorios');
      return res.status(400).json({ error: 'Faltan campos obligatorios: first_name, last_name, email, hire_date son requeridos' });
    }

    if (!/^\d{4}-\d{2}-\d{2}$/.test(hire_date)) {
      console.log('Formato de hire_date inv√°lido');
      return res.status(400).json({ error: 'Formato de hire_date inv√°lido. Use YYYY-MM-DD' });
    }

    if (department_id) {
      const deptCheck = await pool.query('SELECT id FROM departments WHERE id = $1', [department_id]);
      if (deptCheck.rows.length === 0) {
        console.log(`department_id ${department_id} no existe`);
        return res.status(400).json({ error: `El department_id ${department_id} no existe` });
      }
    }

    if (role_id) {
      const roleCheck = await pool.query('SELECT id FROM roles WHERE id = $1', [role_id]);
      if (roleCheck.rows.length === 0) {
        console.log(`role_id ${role_id} no existe`);
        return res.status(400).json({ error: `El role_id ${role_id} no existe` });
      }
    }

    const tempPassword = `TempPass${Math.floor(Math.random() * 1000000)}`;
    const hashedPassword = await bcrypt.hash(tempPassword, 10);

    console.log('Insertando empleado en employees...');
    const client = await pool.connect();

    try {
      await client.query('BEGIN');

      const employeeResult = await client.query(
        'INSERT INTO employees (first_name, last_name, email, hire_date, department_id, role_id, is_active) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *',
        [first_name, last_name, email, hire_date, department_id, role_id, true]
      );
      const employee = employeeResult.rows[0];
      console.log('Empleado creado:', employee);

      const userResult = await client.query(
        'INSERT INTO users (employee_id, email, password, role, is_active, created_at, force_password_change) VALUES ($1, $2, $3, $4, $5, NOW(), TRUE) RETURNING id',
        [employee.id, email, hashedPassword, 'employee', true]
      );
      const userId = userResult.rows[0].id;
      console.log('Usuario creado con ID:', userId);

      await client.query(
        'INSERT INTO user_roles (user_id, role) VALUES ($1, $2) ON CONFLICT (user_id, role) DO NOTHING',
        [userId, 'employee']
      );
      console.log('Rol employee asignado al usuario');

      const mailOptions = {
        from: 'tu_correo@gmail.com',
        to: email,
        subject: 'Bienvenido(a) a HR System - Contrase√±a Temporal',
        text: `Hola ${first_name} ${last_name},\n\nTu cuenta ha sido creada en el sistema HR. Aqu√≠ est√° tu contrase√±a temporal para iniciar sesi√≥n:\n\nContrase√±a: ${tempPassword}\n\nPor favor, inicia sesi√≥n en http://localhost:3000 y cambia tu contrase√±a lo antes posible.\n\nSaludos,\nEquipo HR`,
      };

      await transporter.sendMail(mailOptions);
      console.log(`Correo enviado a ${email} con contrase√±a temporal: ${tempPassword}`);

      await client.query('COMMIT');

      res.status(201).json({ ...employee, tempPassword });
    } catch (err) {
      await client.query('ROLLBACK');
      throw err;
    } finally {
      client.release();
    }
  } catch (err) {
    console.error('Error en POST /employees:', {
      message: err.message,
      stack: err.stack,
      requestBody: req.body
    });
    res.status(500).json({ error: err.message, details: err.stack });
  }
});

app.put('/employees/:id', authenticateToken, authorizeRole('admin'), async (req, res) => {
  const { id } = req.params;
  const { first_name, last_name, email, hire_date, department_id, role_id } = req.body;
  try {
    console.log('Inicio de PUT /employees/:id', { id });
    console.log('Datos recibidos:', { first_name, last_name, email, hire_date, department_id, role_id });

    const currentEmployee = await pool.query('SELECT * FROM employees WHERE id = $1 AND is_active = TRUE', [id]);
    if (currentEmployee.rows.length === 0) {
      console.log('Empleado no encontrado');
      return res.status(404).json({ error: 'Empleado no encontrado' });
    }
    const oldData = currentEmployee.rows[0];

    if (email !== oldData.email) {
      const emailCheck = await pool.query('SELECT id FROM employees WHERE email = $1 AND id != $2', [email, id]);
      if (emailCheck.rows.length > 0) {
        console.log('Email ya existe en otro empleado:', email);
        return res.status(400).json({ error: 'El email ya est√° en uso por otro empleado' });
      }
    }

    const result = await pool.query(
      'UPDATE employees SET first_name = $1, last_name = $2, email = $3, hire_date = $4, department_id = $5, role_id = $6 WHERE id = $7 AND is_active = TRUE RETURNING *',
      [first_name, last_name, email, hire_date, department_id, role_id, id]
    );

    const updatedEmployee = result.rows[0];
    console.log('Empleado actualizado:', updatedEmployee);

    const fieldsToCheck = [
      { name: 'hire_date', old: oldData.hire_date, new: hire_date },
      { name: 'department_id', old: oldData.department_id, new: department_id },
      { name: 'role_id', old: oldData.role_id, new: role_id },
    ];

    for (const field of fieldsToCheck) {
      if (field.old !== field.new) {
        await pool.query(
          'INSERT INTO employee_history (employee_id, field_changed, old_value, new_value) VALUES ($1, $2, $3, $4)',
          [id, field.name, field.old?.toString() || null, field.new?.toString() || null]
        );
      }
    }

    res.json(updatedEmployee);
  } catch (err) {
    console.error('Error en PUT /employees/:id:', {
      message: err.message,
      stack: err.stack,
      requestBody: req.body
    });
    res.status(500).json({ error: err.message, details: err.stack });
  }
});

app.delete('/employees/:id', authenticateToken, authorizeRole('admin'), async (req, res) => {
  const { id } = req.params;
  try {
    const result = await pool.query(
      'UPDATE employees SET is_active = FALSE WHERE id = $1 RETURNING *',
      [id]
    );
    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Empleado no encontrado' });
    }
    res.status(204).send();
  } catch (error) {
    console.error('Error marking employee as inactive:', error);
    res.status(500).json({ error: error.message });
  }
});

app.get('/departments', authenticateToken, authorizeRole('admin'), async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM departments');
    res.json(result.rows);
  } catch (err) {
    res.status(500).send(`Error: ${err.message}`);
  }
});

app.post('/departments', authenticateToken, authorizeRole('admin'), async (req, res) => {
  const { name } = req.body;
  try {
    const result = await pool.query(
      'INSERT INTO departments (name) VALUES ($1) RETURNING *',
      [name]
    );
    res.status(201).json(result.rows[0]);
  } catch (err) {
    res.status(500).send(`Error: ${err.message}`);
  }
});

app.put('/departments/:id', authenticateToken, authorizeRole('admin'), async (req, res) => {
  const { id } = req.params;
  const { name } = req.body;
  try {
    const result = await pool.query(
      'UPDATE departments SET name = $1 WHERE id = $2 RETURNING *',
      [name, id]
    );
    if (result.rows.length === 0) return res.status(404).send('Departamento no encontrado');
    res.json(result.rows[0]);
  } catch (err) {
    res.status(500).send(`Error: ${err.message}`);
  }
});

app.delete('/departments/:id', authenticateToken, authorizeRole('admin'), async (req, res) => {
  const { id } = req.params;
  try {
    const employeeCount = await pool.query('SELECT COUNT(*) FROM employees WHERE department_id = $1 AND is_active = TRUE', [id]);
    if (parseInt(employeeCount.rows[0].count) > 0) {
      return res.status(400).json({ error: `No se puede eliminar el departamento. Tiene ${employeeCount.rows[0].count} empleados asociados.` });
    }
    await pool.query('DELETE FROM departments WHERE id = $1', [id]);
    res.sendStatus(204);
  } catch (err) {
    res.status(500).send(`Error: ${err.message}`);
  }
});

app.get('/roles', authenticateToken, authorizeRole('admin'), async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM roles');
    res.json(result.rows);
  } catch (err) {
    res.status(500).send(`Error: ${err.message}`);
  }
});

app.post('/roles', authenticateToken, authorizeRole('admin'), async (req, res) => {
  const { title, salary } = req.body;
  try {
    const result = await pool.query(
      'INSERT INTO roles (title, salary) VALUES ($1, $2) RETURNING *',
      [title, salary || 0.00]
    );
    res.status(201).json(result.rows[0]);
  } catch (err) {
    res.status(500).send(`Error: ${err.message}`);
  }
});

app.put('/roles/:id', authenticateToken, authorizeRole('admin'), async (req, res) => {
  const { id } = req.params;
  const { title, salary } = req.body;
  try {
    const result = await pool.query(
      'UPDATE roles SET title = $1, salary = $2 WHERE id = $3 RETURNING *',
      [title, salary || 0.00, id]
    );
    if (result.rows.length === 0) return res.status(404).send('Cargo no encontrado');
    res.json(result.rows[0]);
  } catch (err) {
    res.status(500).send(`Error: ${err.message}`);
  }
});

app.delete('/roles/:id', authenticateToken, authorizeRole('admin'), async (req, res) => {
  const { id } = req.params;
  try {
    const employeeCount = await pool.query('SELECT COUNT(*) FROM employees WHERE role_id = $1 AND is_active = TRUE', [id]);
    if (parseInt(employeeCount.rows[0].count) > 0) {
      return res.status(400).json({ error: `No se puede eliminar el cargo. Tiene ${employeeCount.rows[0].count} empleados asociados.` });
    }
    await pool.query('DELETE FROM roles WHERE id = $1', [id]);
    res.sendStatus(204);
  } catch (err) {
    res.status(500).send(`Error: ${err.message}`);
  }
});

app.get('/reports/salaries-by-department', authenticateToken, authorizeRole('admin'), async (req, res) => {
  try {
    let query = `
      SELECT 
        d.name AS department_name,
        COUNT(e.id) AS employee_count,
        SUM(r.salary) AS total_salary,
        AVG(r.salary) AS avg_salary
      FROM departments d
      LEFT JOIN employees e ON d.id = e.department_id AND e.is_active = TRUE
      LEFT JOIN roles r ON e.role_id = r.id
    `;
    const values = [];

    query += ' GROUP BY d.id, d.name ORDER BY d.id';
    const result = await pool.query(query, values);
    console.log('Resultado de /reports/salaries-by-department:', result.rows);
    res.json(result.rows);
  } catch (err) {
    console.error('Error en GET /reports/salaries-by-department:', err);
    res.status(500).send(`Error: ${err.message}`);
  }
});

app.get('/employees/:id/history', authenticateToken, async (req, res) => {
  const { id } = req.params;
  try {
    const employeeId = parseInt(id);
    if (isNaN(employeeId)) {
      return res.status(400).json({ error: 'ID de empleado inv√°lido' });
    }
    if (!req.user.roles.includes('admin') && req.user.employee_id !== employeeId) {
      return res.status(403).json({ error: 'Acceso denegado: Solo puedes ver tu propio historial o necesitas permisos de admin' });
    }
    const result = await pool.query(
      'SELECT * FROM employee_history WHERE employee_id = $1 ORDER BY change_date DESC',
      [employeeId]
    );
    res.json(result.rows);
  } catch (err) {
    console.error('Error en GET /employees/:id/history:', err);
    res.status(500).send(`Error: ${err.message}`);
  }
});

app.put('/employees/:id/restore', authenticateToken, authorizeRole('admin'), async (req, res) => {
  const { id } = req.params;
  try {
    const result = await pool.query(
      'UPDATE employees SET is_active = TRUE WHERE id = $1 RETURNING *',
      [id]
    );
    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Empleado no encontrado' });
    }
    res.json(result.rows[0]);
  } catch (error) {
    console.error('Error restoring employee:', error);
    res.status(500).json({ error: error.message });
  }
});

app.get('/recognitions', authenticateToken, async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const offset = (page - 1) * limit;

    let query = 'SELECT * FROM recognitions';
    const values = [];
    if (!req.user.roles.includes('admin')) {
      query += ' WHERE employee_id = $1';
      values.push(req.user.employee_id);
    }
    query += ' ORDER BY date DESC LIMIT $' + (values.length + 1) + ' OFFSET $' + (values.length + 2);
    values.push(limit, offset);

    const result = await pool.query(query, values);
    const total = await pool.query('SELECT COUNT(*) FROM recognitions' + (values.length > 0 ? ' WHERE employee_id = $1' : ''), values.slice(0, 1));
    res.json({
      data: result.rows,
      total: parseInt(total.rows[0].count),
      page,
      limit,
    });
  } catch (err) {
    console.error('Error fetching recognitions:', err);
    res.status(500).json({ error: 'Error fetching recognitions' });
  }
});

app.get('/auth/verify', authenticateToken, (req, res) => {
  res.status(200).json({ message: 'Token v√°lido' });
});


app.get('/time/entries/:employeeId', authenticateToken, async (req, res) => {
  const { employeeId } = req.params;
  try {
    // Verificar permisos: solo el empleado puede ver sus propios fichajes, o un admin
    if (!req.user.roles.includes('admin') && req.user.employee_id !== parseInt(employeeId)) {
      return res.status(403).json({ error: 'Acceso denegado: Solo puedes ver tus propios fichajes' });
    }

    // Consultar los fichajes del empleado
    const result = await pool.query(
      'SELECT * FROM time_entries WHERE employee_id = $1 ORDER BY clock_in DESC',
      [employeeId]
    );

    res.json(result.rows);
  } catch (err) {
    console.error('Error en GET /time/entries/:employeeId:', err);
    res.status(500).json({ error: err.message });
  }
});

app.post('/recognitions', authenticateToken, async (req, res) => {
  const { employee_id, message, badge, date } = req.body;

  try {
    const employeeCheck = await pool.query('SELECT * FROM employees WHERE id = $1 AND is_active = TRUE', [employee_id]);
    if (employeeCheck.rows.length === 0) {
      return res.status(404).json({ error: 'Empleado no encontrado o no est√° activo' });
    }

    if (!message || !badge || !date) {
      return res.status(400).json({ error: 'Faltan campos requeridos: message, badge, y date son obligatorios' });
    }

    const result = await pool.query(
      'INSERT INTO recognitions (employee_id, message, badge, date) VALUES ($1, $2, $3, $4) RETURNING *',
      [employee_id, message, badge, date]
    );
    res.status(201).json(result.rows[0]);
  } catch (err) {
    console.error('Error creating recognition:', err);
    res.status(500).json({ error: 'Error creating recognition: ' + err.message });
  }
});

app.delete('/recognitions/:id', authenticateToken, authorizeRole('admin'), async (req, res) => {
  const { id } = req.params;
  try {
    const result = await pool.query('DELETE FROM recognitions WHERE id = $1 RETURNING *', [id]);
    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Reconocimiento no encontrado' });
    }
    res.sendStatus(204);
  } catch (err) {
    console.error('Error deleting recognition:', err);
    res.status(500).json({ error: 'Error deleting recognition: ' + err.message });
  }
});

app.post('/time/clock-in', authenticateToken, async (req, res) => {
  const { employee_id } = req.body;
  try {
    // Verificar permisos: solo el empleado puede marcar su entrada, o un admin
    if (!req.user.roles.includes('admin') && req.user.employee_id !== employee_id) {
      return res.status(403).json({ error: 'Acceso denegado: Solo puedes marcar tu propia entrada' });
    }

    // Insertar el registro de entrada
    const result = await pool.query(
      'INSERT INTO time_entries (employee_id, clock_in) VALUES ($1, NOW()) RETURNING *',
      [employee_id]
    );

    res.status(201).json(result.rows[0]);
  } catch (err) {
    console.error('Error en POST /time/clock-in:', err);
    res.status(500).json({ error: err.message });
  }
});

app.put('/time/clock-out/:id', authenticateToken, async (req, res) => {
  const { id } = req.params;
  try {
    // Obtener el registro de entrada
    const entryResult = await pool.query(
      'SELECT * FROM time_entries WHERE id = $1',
      [id]
    );

    if (entryResult.rows.length === 0) {
      return res.status(404).json({ error: 'Registro de entrada no encontrado' });
    }

    const entry = entryResult.rows[0];

    // Verificar permisos: solo el empleado puede marcar su salida, o un admin
    if (!req.user.roles.includes('admin') && req.user.employee_id !== entry.employee_id) {
      return res.status(403).json({ error: 'Acceso denegado: Solo puedes marcar tu propia salida' });
    }

    // Calcular el tiempo transcurrido en minutos
    const clockIn = new Date(entry.clock_in);
    const clockOut = new Date();
    const diffMs = clockOut - clockIn;
    const durationMinutes = Math.floor(diffMs / (1000 * 60)); // Diferencia en minutos

    // Actualizar el registro con clock_out y duration
    const result = await pool.query(
      'UPDATE time_entries SET clock_out = NOW(), duration = $1 WHERE id = $2 RETURNING *',
      [durationMinutes, id]
    );

    res.json(result.rows[0]);
  } catch (err) {
    console.error('Error en PUT /time/clock-out/:id:', err);
    res.status(500).json({ error: err.message });
  }
});

app.listen(3001, () => console.log('Server running on port 3001'));const bcrypt = require('bcrypt');
const hash = bcrypt.hashSync('mihai', 10);
console.log(hash);--
-- PostgreSQL database dump
--

-- Dumped from database version 14.17 (Homebrew)
-- Dumped by pg_dump version 14.17 (Homebrew)

-- Started on 2025-03-25 20:02:48 CET

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 2 (class 3079 OID 16573)
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- TOC entry 3788 (class 0 OID 0)
-- Dependencies: 2
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 210 (class 1259 OID 16468)
-- Name: departments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.departments (
    id integer NOT NULL,
    name character varying(100) NOT NULL
);


ALTER TABLE public.departments OWNER TO postgres;

--
-- TOC entry 211 (class 1259 OID 16471)
-- Name: departments_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.departments_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.departments_id_seq OWNER TO postgres;

--
-- TOC entry 3789 (class 0 OID 0)
-- Dependencies: 211
-- Name: departments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.departments_id_seq OWNED BY public.departments.id;


--
-- TOC entry 212 (class 1259 OID 16472)
-- Name: employee_history; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.employee_history (
    id integer NOT NULL,
    employee_id integer NOT NULL,
    field_changed character varying(50) NOT NULL,
    old_value character varying(100),
    new_value character varying(100),
    change_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.employee_history OWNER TO postgres;

--
-- TOC entry 213 (class 1259 OID 16476)
-- Name: employee_history_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.employee_history_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.employee_history_id_seq OWNER TO postgres;

--
-- TOC entry 3790 (class 0 OID 0)
-- Dependencies: 213
-- Name: employee_history_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.employee_history_id_seq OWNED BY public.employee_history.id;


--
-- TOC entry 214 (class 1259 OID 16477)
-- Name: employees; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.employees (
    id integer NOT NULL,
    first_name character varying(50) NOT NULL,
    last_name character varying(50) NOT NULL,
    email character varying(100) NOT NULL,
    hire_date date NOT NULL,
    department_id integer,
    role_id integer,
    is_active boolean DEFAULT true
);


ALTER TABLE public.employees OWNER TO postgres;

--
-- TOC entry 215 (class 1259 OID 16481)
-- Name: employees_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.employees_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.employees_id_seq OWNER TO postgres;

--
-- TOC entry 3791 (class 0 OID 0)
-- Dependencies: 215
-- Name: employees_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.employees_id_seq OWNED BY public.employees.id;


--
-- TOC entry 216 (class 1259 OID 16482)
-- Name: recognitions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.recognitions (
    id integer NOT NULL,
    employee_id integer NOT NULL,
    message text NOT NULL,
    badge character varying(50) NOT NULL,
    date date NOT NULL
);


ALTER TABLE public.recognitions OWNER TO postgres;

--
-- TOC entry 217 (class 1259 OID 16487)
-- Name: recognitions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.recognitions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.recognitions_id_seq OWNER TO postgres;

--
-- TOC entry 3792 (class 0 OID 0)
-- Dependencies: 217
-- Name: recognitions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.recognitions_id_seq OWNED BY public.recognitions.id;


--
-- TOC entry 218 (class 1259 OID 16488)
-- Name: roles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.roles (
    id integer NOT NULL,
    title character varying(100) NOT NULL,
    salary numeric(10,2) NOT NULL
);


ALTER TABLE public.roles OWNER TO postgres;

--
-- TOC entry 219 (class 1259 OID 16491)
-- Name: roles_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.roles_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.roles_id_seq OWNER TO postgres;

--
-- TOC entry 3793 (class 0 OID 0)
-- Dependencies: 219
-- Name: roles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.roles_id_seq OWNED BY public.roles.id;


--
-- TOC entry 223 (class 1259 OID 16549)
-- Name: time_entries; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.time_entries (
    id integer NOT NULL,
    employee_id integer NOT NULL,
    clock_in timestamp without time zone NOT NULL,
    clock_out timestamp without time zone,
    duration integer
);


ALTER TABLE public.time_entries OWNER TO postgres;

--
-- TOC entry 222 (class 1259 OID 16548)
-- Name: time_entries_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.time_entries_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.time_entries_id_seq OWNER TO postgres;

--
-- TOC entry 3794 (class 0 OID 0)
-- Dependencies: 222
-- Name: time_entries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.time_entries_id_seq OWNED BY public.time_entries.id;


--
-- TOC entry 224 (class 1259 OID 16561)
-- Name: user_roles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_roles (
    user_id integer NOT NULL,
    role character varying(50) NOT NULL
);


ALTER TABLE public.user_roles OWNER TO postgres;

--
-- TOC entry 220 (class 1259 OID 16492)
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    id integer NOT NULL,
    employee_id integer,
    email character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    role character varying(50) DEFAULT 'employee'::character varying NOT NULL,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    force_password_change boolean DEFAULT true
);


ALTER TABLE public.users OWNER TO postgres;

--
-- TOC entry 221 (class 1259 OID 16500)
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.users_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO postgres;

--
-- TOC entry 3795 (class 0 OID 0)
-- Dependencies: 221
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;


--
-- TOC entry 3587 (class 2604 OID 16501)
-- Name: departments id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.departments ALTER COLUMN id SET DEFAULT nextval('public.departments_id_seq'::regclass);


--
-- TOC entry 3589 (class 2604 OID 16502)
-- Name: employee_history id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employee_history ALTER COLUMN id SET DEFAULT nextval('public.employee_history_id_seq'::regclass);


--
-- TOC entry 3591 (class 2604 OID 16503)
-- Name: employees id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employees ALTER COLUMN id SET DEFAULT nextval('public.employees_id_seq'::regclass);


--
-- TOC entry 3592 (class 2604 OID 16504)
-- Name: recognitions id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.recognitions ALTER COLUMN id SET DEFAULT nextval('public.recognitions_id_seq'::regclass);


--
-- TOC entry 3593 (class 2604 OID 16505)
-- Name: roles id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.roles ALTER COLUMN id SET DEFAULT nextval('public.roles_id_seq'::regclass);


--
-- TOC entry 3599 (class 2604 OID 16552)
-- Name: time_entries id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.time_entries ALTER COLUMN id SET DEFAULT nextval('public.time_entries_id_seq'::regclass);


--
-- TOC entry 3597 (class 2604 OID 16506)
-- Name: users id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);


--
-- TOC entry 3768 (class 0 OID 16468)
-- Dependencies: 210
-- Data for Name: departments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.departments (id, name) FROM stdin;
2	IT
1	Ventas
3	RRHH
9	Secretaria
11	Jardinero
\.


--
-- TOC entry 3770 (class 0 OID 16472)
-- Dependencies: 212
-- Data for Name: employee_history; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.employee_history (id, employee_id, field_changed, old_value, new_value, change_date) FROM stdin;
1	54	hire_date	Thu Feb 20 2020 00:00:00 GMT+0100 (hora est√°ndar de Europa central)	2020-02-20	2025-03-07 14:47:56.30039
2	54	department_id	1	1	2025-03-07 14:47:56.303779
3	54	role_id	5	5	2025-03-07 14:47:56.304163
4	54	hire_date	Thu Feb 20 2020 00:00:00 GMT+0100 (hora est√°ndar de Europa central)	2020-02-20	2025-03-07 14:50:30.369605
5	54	department_id	1	1	2025-03-07 14:50:30.370456
6	54	role_id	5	8	2025-03-07 14:50:30.370867
7	54	hire_date	Thu Feb 20 2020 00:00:00 GMT+0100 (hora est√°ndar de Europa central)	2020-02-20	2025-03-07 19:35:47.518555
8	54	department_id	1	1	2025-03-07 19:35:47.522158
9	54	role_id	8	9	2025-03-07 19:35:47.52262
10	54	hire_date	Thu Feb 20 2020 00:00:00 GMT+0100 (hora est√°ndar de Europa central)	2020-02-20	2025-03-07 20:06:42.904863
11	54	department_id	1	2	2025-03-07 20:06:42.906774
12	54	role_id	9	9	2025-03-07 20:06:42.907415
13	55	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-09	2025-03-07 20:30:12.000207
14	55	department_id	3	3	2025-03-07 20:30:12.002451
15	55	role_id	8	9	2025-03-07 20:30:12.002756
16	54	hire_date	Thu Feb 20 2020 00:00:00 GMT+0100 (hora est√°ndar de Europa central)	2020-02-19	2025-03-07 21:04:06.510231
17	54	department_id	2	2	2025-03-07 21:04:06.513209
18	54	role_id	9	9	2025-03-07 21:04:06.513724
19	54	hire_date	Wed Feb 19 2020 00:00:00 GMT+0100 (hora est√°ndar de Europa central)	2020-02-18	2025-03-07 21:04:19.099738
20	54	department_id	2	2	2025-03-07 21:04:19.100487
21	54	role_id	9	9	2025-03-07 21:04:19.101032
22	56	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-10	2025-03-07 21:25:24.106991
23	56	department_id	1	1	2025-03-07 21:25:24.108932
24	56	role_id	5	8	2025-03-07 21:25:24.109206
25	57	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-10	2025-03-07 21:56:36.567658
26	57	department_id	2	2	2025-03-07 21:56:36.569842
27	57	role_id	5	8	2025-03-07 21:56:36.570731
28	54	hire_date	Tue Feb 18 2020 00:00:00 GMT+0100 (hora est√°ndar de Europa central)	2020-02-17	2025-03-07 22:37:09.915857
29	54	department_id	2	2	2025-03-07 22:37:09.918343
30	54	role_id	9	9	2025-03-07 22:37:09.918664
31	58	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-10	2025-03-08 00:46:36.452237
32	58	department_id	1	2	2025-03-08 00:46:36.453379
33	58	role_id	5	5	2025-03-08 00:46:36.454636
34	61	hire_date	Fri Jan 01 2010 00:00:00 GMT+0100 (hora est√°ndar de Europa central)	2010-01-01	2025-03-08 18:51:19.859293
35	61	department_id	3	3	2025-03-08 18:51:19.862447
36	61	role_id	5	5	2025-03-08 18:51:19.863101
37	63	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-10	2025-03-11 23:25:07.674847
38	63	department_id	2	3	2025-03-11 23:25:07.679274
39	63	role_id	9	9	2025-03-11 23:25:07.680083
40	63	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-10	2025-03-11 23:25:32.926498
41	63	department_id	3	1	2025-03-11 23:25:32.927403
42	63	role_id	9	9	2025-03-11 23:25:32.92786
43	64	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-10	2025-03-11 23:56:59.007626
44	64	department_id	2	2	2025-03-11 23:56:59.009937
45	64	role_id	8	8	2025-03-11 23:56:59.010367
46	63	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-10	2025-03-11 23:57:13.294726
47	63	department_id	1	1	2025-03-11 23:57:13.296294
48	63	role_id	9	9	2025-03-11 23:57:13.296836
49	63	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-10	2025-03-11 23:58:09.091614
50	63	department_id	1	1	2025-03-11 23:58:09.092698
51	63	role_id	9	9	2025-03-11 23:58:09.09347
52	60	hire_date	Wed Jan 01 2025 00:00:00 GMT+0100 (hora est√°ndar de Europa central)	2025-01-01	2025-03-12 00:07:11.041197
53	60	department_id	2	2	2025-03-12 00:07:11.04442
54	60	role_id	8	8	2025-03-12 00:07:11.044959
55	60	hire_date	Wed Jan 01 2025 00:00:00 GMT+0100 (hora est√°ndar de Europa central)	2025-01-01	2025-03-12 00:08:41.493848
56	60	department_id	2	3	2025-03-12 00:08:41.495182
57	60	role_id	8	8	2025-03-12 00:08:41.495725
58	63	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2025-10-10	2025-03-12 00:10:06.65412
59	63	department_id	1	1	2025-03-12 00:10:06.65874
60	63	role_id	9	9	2025-03-12 00:10:06.659167
61	57	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-10	2025-03-12 00:19:01.277107
62	57	department_id	2	2	2025-03-12 00:19:01.278463
63	57	role_id	8	8	2025-03-12 00:19:01.279574
64	58	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-10	2025-03-12 00:20:36.387895
65	58	department_id	2	2	2025-03-12 00:20:36.389403
66	58	role_id	5	5	2025-03-12 00:20:36.389936
67	56	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-10	2025-03-12 14:48:36.710747
68	56	department_id	1	3	2025-03-12 14:48:36.714058
69	56	role_id	8	13	2025-03-12 14:48:36.714784
70	103	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-10	2025-03-17 21:27:42.125342
71	66	hire_date	Wed Feb 12 2025 00:00:00 GMT+0100 (hora est√°ndar de Europa central)	2025-02-12	2025-03-17 22:31:31.598274
72	60	hire_date	Wed Jan 01 2025 00:00:00 GMT+0100 (hora est√°ndar de Europa central)	2025-01-01	2025-03-17 23:51:33.012564
73	117	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2025-10-10	2025-03-20 00:13:29.879336
74	57	hire_date	Sun Oct 10 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-10	2025-03-20 01:17:28.16259
75	57	role_id	8	9	2025-03-20 01:17:28.171064
76	55	hire_date	Sat Oct 09 2010 00:00:00 GMT+0200 (hora de verano de Europa central)	2010-10-09	2025-03-20 01:22:32.093202
\.


--
-- TOC entry 3772 (class 0 OID 16477)
-- Dependencies: 214
-- Data for Name: employees; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.employees (id, first_name, last_name, email, hire_date, department_id, role_id, is_active) FROM stdin;
54	testcambio	testcambio	tester1@mail.es	2020-02-17	2	9	f
61	Vitalii	Carabutttttttt	mail.es	2010-01-01	3	5	f
1	Admin	User	admin@example.com	2023-01-01	\N	\N	t
62	aaa	bbb	aa@mail.es	2010-10-10	3	5	f
66	Ivan	Garcia	ivang@mail.es	2025-02-12	1	5	t
65	andrees	prapra	fernandez	2023-12-09	3	8	f
64	Vanea	Pereira	vanea@mail.es	2010-10-10	2	8	t
63	Marius	Ionut	Fernandez	2025-10-10	1	9	t
58	Ivan	Garcia	ivan@mail.es	2010-10-10	2	5	t
117	Maria	Sanchez	vaniusatulumamalui@gmail.com	2025-10-10	9	5	t
60	Valentinaaaa	Carabut	valentina@mail.es	2025-01-01	3	8	f
56	Mihai	Carabut	mihai@mail.es	2010-10-10	3	13	f
55	Juan	Garcia	jgarcia@mail.es	2010-10-09	3	9	t
57	Liuda	Carabut	liuda@mail.es	2010-10-10	2	9	f
102	Test	User	test.user@mail.es	2025-03-17	9	13	t
103	Max	Maximus	max@mail.es	2010-10-10	9	13	t
\.


--
-- TOC entry 3774 (class 0 OID 16482)
-- Dependencies: 216
-- Data for Name: recognitions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.recognitions (id, employee_id, message, badge, date) FROM stdin;
7	58	aaa	star	2025-03-14
8	57	aaa	star	2025-03-20
11	117	buena empleada	xxx	2025-03-19
\.


--
-- TOC entry 3776 (class 0 OID 16488)
-- Dependencies: 218
-- Data for Name: roles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.roles (id, title, salary) FROM stdin;
5	Jefe	10.00
8	Desarrollador	30.00
9	Gerente	50.00
13	Boss	100.00
14	Becario	1000.00
\.


--
-- TOC entry 3781 (class 0 OID 16549)
-- Dependencies: 223
-- Data for Name: time_entries; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.time_entries (id, employee_id, clock_in, clock_out, duration) FROM stdin;
1	56	2025-03-13 02:24:54.572656	2025-03-13 02:24:56.286737	\N
2	66	2025-03-13 02:47:38.60867	2025-03-13 02:47:39.518243	\N
3	56	2025-03-16 20:35:45.690244	2025-03-16 20:35:46.638639	\N
4	103	2025-03-17 23:38:45.832704	2025-03-17 23:38:46.374867	\N
5	117	2025-03-19 21:20:23.816666	2025-03-19 21:20:24.604165	\N
6	117	2025-03-19 23:40:32.508819	\N	\N
7	117	2025-03-20 01:49:55.94712	\N	\N
8	117	2025-03-20 01:49:58.80313	\N	\N
9	117	2025-03-20 01:58:21.28287	\N	\N
10	117	2025-03-20 19:14:54.890584	\N	\N
11	117	2025-03-20 19:29:46.28921	2025-03-20 19:40:09.874374	10
12	117	2025-03-20 19:40:14.892097	\N	\N
13	117	2025-03-20 19:40:18.644418	2025-03-20 19:40:22.645646	0
\.


--
-- TOC entry 3782 (class 0 OID 16561)
-- Dependencies: 224
-- Data for Name: user_roles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_roles (user_id, role) FROM stdin;
4	admin
5	employee
6	employee
7	employee
12	employee
\.


--
-- TOC entry 3778 (class 0 OID 16492)
-- Dependencies: 220
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users (id, employee_id, email, password, role, is_active, created_at, force_password_change) FROM stdin;
5	56	mihai@mail.es	$2b$10$afx7e3xUAvduTnrSNfQgWe4W5DNoO3mIcRiujpeXgiD3g0DOOlK3y	employee	t	2025-03-12 15:52:17.665	t
4	1	admin@example.com	$2b$10$M5rHXBvnvu7ZdRbA/PgOVepoT8WbcL1HzgA7QmRjEi.zbOwImwv.S	admin	t	2025-03-08 19:39:17.665664	f
6	102	test.user@mail.es	$2a$06$h1Yylm2j3CihGFNCsZw88OrP772g21zykuQgLItdMd4nsoeM.dhme	employee	t	2025-03-16 20:26:53.515183	t
7	103	max@mail.es	$2a$06$Kl71PCwQn5YHZDi6ZZEwz.TSktBJ2Do8r/GMevVw5ya.VVf2uuqE.	employee	t	2025-03-16 20:30:28.705517	t
12	117	vaniusatulumamalui@gmail.com	$2b$10$tzTXOizWPuG7ywK/HoGyDuCRZJbChLB81arAuTQr5dfFT3HBKo7ze	employee	t	2025-03-18 23:47:59.669061	f
\.


--
-- TOC entry 3796 (class 0 OID 0)
-- Dependencies: 211
-- Name: departments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.departments_id_seq', 11, true);


--
-- TOC entry 3797 (class 0 OID 0)
-- Dependencies: 213
-- Name: employee_history_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.employee_history_id_seq', 76, true);


--
-- TOC entry 3798 (class 0 OID 0)
-- Dependencies: 215
-- Name: employees_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.employees_id_seq', 117, true);


--
-- TOC entry 3799 (class 0 OID 0)
-- Dependencies: 217
-- Name: recognitions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.recognitions_id_seq', 11, true);


--
-- TOC entry 3800 (class 0 OID 0)
-- Dependencies: 219
-- Name: roles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.roles_id_seq', 15, true);


--
-- TOC entry 3801 (class 0 OID 0)
-- Dependencies: 222
-- Name: time_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.time_entries_id_seq', 13, true);


--
-- TOC entry 3802 (class 0 OID 0)
-- Dependencies: 221
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.users_id_seq', 12, true);


--
-- TOC entry 3601 (class 2606 OID 16508)
-- Name: departments departments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.departments
    ADD CONSTRAINT departments_pkey PRIMARY KEY (id);


--
-- TOC entry 3603 (class 2606 OID 16510)
-- Name: employee_history employee_history_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employee_history
    ADD CONSTRAINT employee_history_pkey PRIMARY KEY (id);


--
-- TOC entry 3605 (class 2606 OID 16512)
-- Name: employees employees_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_email_key UNIQUE (email);


--
-- TOC entry 3607 (class 2606 OID 16514)
-- Name: employees employees_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_pkey PRIMARY KEY (id);


--
-- TOC entry 3611 (class 2606 OID 16516)
-- Name: recognitions recognitions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.recognitions
    ADD CONSTRAINT recognitions_pkey PRIMARY KEY (id);


--
-- TOC entry 3613 (class 2606 OID 16518)
-- Name: roles roles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.roles
    ADD CONSTRAINT roles_pkey PRIMARY KEY (id);


--
-- TOC entry 3619 (class 2606 OID 16554)
-- Name: time_entries time_entries_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.time_entries
    ADD CONSTRAINT time_entries_pkey PRIMARY KEY (id);


--
-- TOC entry 3609 (class 2606 OID 16611)
-- Name: employees unique_email; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT unique_email UNIQUE (email);


--
-- TOC entry 3621 (class 2606 OID 16565)
-- Name: user_roles user_roles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_roles
    ADD CONSTRAINT user_roles_pkey PRIMARY KEY (user_id, role);


--
-- TOC entry 3615 (class 2606 OID 16520)
-- Name: users users_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_email_key UNIQUE (email);


--
-- TOC entry 3617 (class 2606 OID 16522)
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- TOC entry 3622 (class 2606 OID 16523)
-- Name: employee_history employee_history_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employee_history
    ADD CONSTRAINT employee_history_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id);


--
-- TOC entry 3623 (class 2606 OID 16528)
-- Name: employees employees_department_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_department_id_fkey FOREIGN KEY (department_id) REFERENCES public.departments(id);


--
-- TOC entry 3624 (class 2606 OID 16533)
-- Name: employees employees_role_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_role_id_fkey FOREIGN KEY (role_id) REFERENCES public.roles(id);


--
-- TOC entry 3625 (class 2606 OID 16538)
-- Name: recognitions recognitions_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.recognitions
    ADD CONSTRAINT recognitions_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id);


--
-- TOC entry 3627 (class 2606 OID 16555)
-- Name: time_entries time_entries_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.time_entries
    ADD CONSTRAINT time_entries_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id);


--
-- TOC entry 3628 (class 2606 OID 16566)
-- Name: user_roles user_roles_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_roles
    ADD CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- TOC entry 3626 (class 2606 OID 16543)
-- Name: users users_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE SET NULL;


-- Completed on 2025-03-25 20:02:50 CET

--
-- PostgreSQL database dump complete
--

